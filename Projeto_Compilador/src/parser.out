Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AT
    EXTERNAL
    FILE
    GOTO
    IMPLEMENTATION
    INTERFACE
    LABEL
    LBRACK2
    LCURLY
    NOT
    PACKED
    POINTER
    RBRACK2
    RCURLY
    UNIT
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> programHeading block DOT
Rule 2     programHeading -> PROGRAM identifier SEMI
Rule 3     identifier -> IDENT
Rule 4     block -> declarations compoundStatement
Rule 5     declarations -> declaration declarations
Rule 6     declarations -> empty
Rule 7     declaration -> constantDefinitionBlock
Rule 8     declaration -> typeDeclarationBlock
Rule 9     declaration -> variableDeclarationBlock
Rule 10    declaration -> procedureAndFunctionDeclarationBlock
Rule 11    constantDefinitionBlock -> CONST constantDefinitionList
Rule 12    constantDefinitionList -> constantDefinitionList constantDefinition SEMI
Rule 13    constantDefinitionList -> constantDefinition SEMI
Rule 14    constantDefinition -> identifier EQUAL constant
Rule 15    constant -> unsignedNumber
Rule 16    constant -> sign unsignedNumber
Rule 17    constant -> identifier
Rule 18    constant -> sign identifier
Rule 19    constant -> string
Rule 20    constant -> constantChr
Rule 21    unsignedNumber -> unsignedInteger
Rule 22    unsignedNumber -> unsignedReal
Rule 23    unsignedInteger -> NUM_INT
Rule 24    unsignedReal -> NUM_REAL
Rule 25    sign -> PLUS
Rule 26    sign -> MINUS
Rule 27    string -> STRING_LITERAL
Rule 28    constantChr -> CHR LPAREN unsignedInteger RPAREN
Rule 29    typeDeclarationBlock -> TYPE typeDefinitionList
Rule 30    typeDefinitionList -> typeDefinitionList typeDefinition SEMI
Rule 31    typeDefinitionList -> typeDefinition SEMI
Rule 32    typeDefinition -> identifier EQUAL type_
Rule 33    type_ -> scalarType
Rule 34    type_ -> subrangeType
Rule 35    type_ -> typeIdentifier
Rule 36    type_ -> stringType
Rule 37    type_ -> arrayType
Rule 38    scalarType -> LPAREN identifierList RPAREN
Rule 39    identifierList -> identifierList COMMA identifier
Rule 40    identifierList -> identifier
Rule 41    subrangeType -> unsignedInteger DOTDOT unsignedInteger
Rule 42    identifierType -> IDENT
Rule 43    stringType -> STRING LBRACK unsignedInteger RBRACK
Rule 44    structuredType -> arrayType
Rule 45    structuredType -> recordType
Rule 46    structuredType -> setType
Rule 47    arrayType -> ARRAY LBRACK subrangeType RBRACK OF typeIdentifier
Rule 48    typeList -> typeList COMMA indexType
Rule 49    typeList -> indexType
Rule 50    indexType -> simpleType
Rule 51    simpleType -> identifierType
Rule 52    recordType -> RECORD fieldList END
Rule 53    fieldList -> fixedPart
Rule 54    fieldList -> fixedPart SEMI variantPart
Rule 55    fieldList -> variantPart
Rule 56    fixedPart -> recordSectionList
Rule 57    recordSectionList -> recordSectionList SEMI recordSection
Rule 58    recordSectionList -> recordSection
Rule 59    recordSection -> identifierList COLON type_
Rule 60    variantPart -> CASE tag OF variantList
Rule 61    tag -> identifier COLON typeIdentifier
Rule 62    tag -> typeIdentifier
Rule 63    typeIdentifier -> identifier
Rule 64    typeIdentifier -> INTEGER
Rule 65    typeIdentifier -> REAL
Rule 66    typeIdentifier -> BOOLEAN
Rule 67    typeIdentifier -> CHAR
Rule 68    typeIdentifier -> STRING
Rule 69    variantList -> variantList SEMI variant
Rule 70    variantList -> variant
Rule 71    variant -> constList COLON LPAREN fieldList RPAREN
Rule 72    constList -> constList COMMA constant
Rule 73    constList -> constant
Rule 74    setType -> SET OF baseType
Rule 75    baseType -> simpleType
Rule 76    variableDeclarationBlock -> VAR variableDeclarationList SEMI
Rule 77    variableDeclarationList -> variableDeclarationList SEMI variableDeclaration
Rule 78    variableDeclarationList -> variableDeclaration
Rule 79    variableDeclaration -> identifierList COLON type_
Rule 80    procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI
Rule 81    procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI
Rule 82    procedureDeclaration -> PROCEDURE identifier SEMI block
Rule 83    procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block
Rule 84    formalParameterList_opt -> formalParameterList
Rule 85    formalParameterList_opt -> empty
Rule 86    formalParameterList -> LPAREN formalParameterSectionList RPAREN
Rule 87    formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection
Rule 88    formalParameterSectionList -> formalParameterSection
Rule 89    formalParameterSection -> parameterGroup
Rule 90    formalParameterSection -> VAR parameterGroup
Rule 91    formalParameterSection -> FUNCTION parameterGroup
Rule 92    formalParameterSection -> PROCEDURE parameterGroup
Rule 93    parameterGroup -> identifierList COLON typeIdentifier
Rule 94    functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block
Rule 95    resultType -> typeIdentifier
Rule 96    compoundStatement -> BEGIN statements END
Rule 97    statements -> statementList
Rule 98    statementList -> statementList SEMI statement
Rule 99    statementList -> statement
Rule 100   statement -> simpleStatement
Rule 101   statement -> structuredStatement
Rule 102   simpleStatement -> callStatement
Rule 103   simpleStatement -> assignmentStatement
Rule 104   simpleStatement -> emptyStatement_
Rule 105   assignmentStatement -> variable ASSIGN Init_Final
Rule 106   variable -> identifier
Rule 107   variable -> indexedVariable
Rule 108   indexedVariable -> identifier LBRACK expression RBRACK
Rule 109   expression -> simpleExpression
Rule 110   expression -> simpleExpression relationalOperator simpleExpression
Rule 111   relationalOperator -> EQUAL
Rule 112   relationalOperator -> NOT_EQUAL
Rule 113   relationalOperator -> LT
Rule 114   relationalOperator -> LE
Rule 115   relationalOperator -> GT
Rule 116   relationalOperator -> GE
Rule 117   relationalOperator -> IN
Rule 118   simpleExpression -> term
Rule 119   simpleExpression -> sign term
Rule 120   simpleExpression -> simpleExpression additiveOperator term
Rule 121   additiveOperator -> PLUS
Rule 122   additiveOperator -> MINUS
Rule 123   additiveOperator -> OR
Rule 124   term -> factor
Rule 125   term -> term multiplicativeOperator factor
Rule 126   multiplicativeOperator -> STAR
Rule 127   multiplicativeOperator -> SLASH
Rule 128   multiplicativeOperator -> DIV
Rule 129   multiplicativeOperator -> MOD
Rule 130   multiplicativeOperator -> AND
Rule 131   factor -> variable
Rule 132   factor -> unsignedConstant
Rule 133   factor -> LPAREN expression RPAREN
Rule 134   unsignedConstant -> unsignedNumber
Rule 135   unsignedConstant -> string
Rule 136   unsignedConstant -> NIL
Rule 137   unsignedConstant -> TRUE
Rule 138   unsignedConstant -> FALSE
Rule 139   callStatement -> identifier
Rule 140   callStatement -> identifier LPAREN expressionList RPAREN
Rule 141   expressionList -> expressionList COMMA expression
Rule 142   expressionList -> expressionList COMMA formattedExpression
Rule 143   expressionList -> expression
Rule 144   expressionList -> formattedExpression
Rule 145   formattedExpression -> variable COLON expression COLON expression
Rule 146   formattedExpression -> variable COLON expression
Rule 147   emptyStatement_ -> <empty>
Rule 148   structuredStatement -> compoundStatement
Rule 149   structuredStatement -> conditionalStatement
Rule 150   structuredStatement -> loopStatement
Rule 151   loopStatement -> forStatement
Rule 152   loopStatement -> whileStatement
Rule 153   loopStatement -> repeatStatement
Rule 154   forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO statement
Rule 155   forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
Rule 156   Init_Final -> callStatement
Rule 157   Init_Final -> expression
Rule 158   whileStatement -> WHILE expression DO statement
Rule 159   repeatStatement -> REPEAT statements UNTIL expression
Rule 160   conditionalStatement -> ifStatement
Rule 161   ifStatement -> IF expression THEN statement
Rule 162   ifStatement -> IF expression THEN statement ELSE statement
Rule 163   empty -> <empty>

Terminals, with rules where they appear

AND                  : 130
ARRAY                : 47
ASSIGN               : 105 154 155
AT                   : 
BEGIN                : 96
BOOLEAN              : 66
CASE                 : 60
CHAR                 : 67
CHR                  : 28
COLON                : 59 61 71 79 93 94 145 145 146
COMMA                : 39 48 72 141 142
CONST                : 11
DIV                  : 128
DO                   : 154 155 158
DOT                  : 1
DOTDOT               : 41
DOWNTO               : 155
ELSE                 : 162
END                  : 52 96
EQUAL                : 14 32 111
EXTERNAL             : 
FALSE                : 138
FILE                 : 
FOR                  : 154 155
FUNCTION             : 91 94
GE                   : 116
GOTO                 : 
GT                   : 115
IDENT                : 3 42
IF                   : 161 162
IMPLEMENTATION       : 
IN                   : 117
INTEGER              : 64
INTERFACE            : 
LABEL                : 
LBRACK               : 43 47 108
LBRACK2              : 
LCURLY               : 
LE                   : 114
LPAREN               : 28 38 71 86 133 140
LT                   : 113
MINUS                : 26 122
MOD                  : 129
NIL                  : 136
NOT                  : 
NOT_EQUAL            : 112
NUM_INT              : 23
NUM_REAL             : 24
OF                   : 47 60 74
OR                   : 123
PACKED               : 
PLUS                 : 25 121
POINTER              : 
PROCEDURE            : 82 83 92
PROGRAM              : 2
RBRACK               : 43 47 108
RBRACK2              : 
RCURLY               : 
REAL                 : 65
RECORD               : 52
REPEAT               : 159
RPAREN               : 28 38 71 86 133 140
SEMI                 : 2 12 13 30 31 54 57 69 76 77 80 81 82 83 87 94 98
SET                  : 74
SLASH                : 127
STAR                 : 126
STRING               : 43 68
STRING_LITERAL       : 27
THEN                 : 161 162
TO                   : 154
TRUE                 : 137
TYPE                 : 29
UNIT                 : 
UNTIL                : 159
VAR                  : 76 90
WHILE                : 158
WITH                 : 
error                : 

Nonterminals, with rules where they appear

Init_Final           : 105 154 154 155 155
additiveOperator     : 120
arrayType            : 37 44
assignmentStatement  : 103
baseType             : 74
block                : 1 82 83 94
callStatement        : 102 156
compoundStatement    : 4 148
conditionalStatement : 149
constList            : 71 72
constant             : 14 72 73
constantChr          : 20
constantDefinition   : 12 13
constantDefinitionBlock : 7
constantDefinitionList : 11 12
declaration          : 5
declarations         : 4 5
empty                : 6 85
emptyStatement_      : 104
expression           : 108 133 141 143 145 145 146 157 158 159 161 162
expressionList       : 140 141 142
factor               : 124 125
fieldList            : 52 71
fixedPart            : 53 54
forStatement         : 151
formalParameterList  : 84
formalParameterList_opt : 83 94
formalParameterSection : 87 88
formalParameterSectionList : 86 87
formattedExpression  : 142 144
functionDeclaration  : 81
identifier           : 2 14 17 18 32 39 40 61 63 82 83 94 106 108 139 140 154 155
identifierList       : 38 39 59 79 93
identifierType       : 51
ifStatement          : 160
indexType            : 48 49
indexedVariable      : 107
loopStatement        : 150
multiplicativeOperator : 125
parameterGroup       : 89 90 91 92
procedureAndFunctionDeclarationBlock : 10
procedureDeclaration : 80
program              : 0
programHeading       : 1
recordSection        : 57 58
recordSectionList    : 56 57
recordType           : 45
relationalOperator   : 110
repeatStatement      : 153
resultType           : 94
scalarType           : 33
setType              : 46
sign                 : 16 18 119
simpleExpression     : 109 110 110 120
simpleStatement      : 100
simpleType           : 50 75
statement            : 98 99 154 155 158 161 162 162
statementList        : 97 98
statements           : 96 159
string               : 19 135
stringType           : 36
structuredStatement  : 101
structuredType       : 
subrangeType         : 34 47
tag                  : 60
term                 : 118 119 120 125
typeDeclarationBlock : 8
typeDefinition       : 30 31
typeDefinitionList   : 29 30
typeIdentifier       : 35 47 61 62 93 95
typeList             : 48
type_                : 32 59 79
unsignedConstant     : 132
unsignedInteger      : 21 28 41 41 43
unsignedNumber       : 15 16 134
unsignedReal         : 22
variable             : 105 131 145 146
variableDeclaration  : 77 78
variableDeclarationBlock : 9
variableDeclarationList : 76 77
variant              : 69 70
variantList          : 60 69
variantPart          : 54 55
whileStatement       : 152

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programHeading block DOT
    (2) programHeading -> . PROGRAM identifier SEMI

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programHeading                 shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programHeading . block DOT
    (4) block -> . declarations compoundStatement
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (163) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration SEMI
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration SEMI
    (82) procedureDeclaration -> . PROCEDURE identifier SEMI block
    (83) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (94) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 163 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    block                          shift and go to state 4
    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 3

    (2) programHeading -> PROGRAM . identifier SEMI
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 19

state 4

    (1) program -> programHeading block . DOT

    DOT             shift and go to state 21


state 5

    (4) block -> declarations . compoundStatement
    (96) compoundStatement -> . BEGIN statements END

    BEGIN           shift and go to state 23

    compoundStatement              shift and go to state 22

state 6

    (5) declarations -> declaration . declarations
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (163) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration SEMI
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration SEMI
    (82) procedureDeclaration -> . PROCEDURE identifier SEMI block
    (83) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (94) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 163 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    declaration                    shift and go to state 6
    declarations                   shift and go to state 24
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 7

    (6) declarations -> empty .

    BEGIN           reduce using rule 6 (declarations -> empty .)


state 8

    (7) declaration -> constantDefinitionBlock .

    CONST           reduce using rule 7 (declaration -> constantDefinitionBlock .)
    TYPE            reduce using rule 7 (declaration -> constantDefinitionBlock .)
    VAR             reduce using rule 7 (declaration -> constantDefinitionBlock .)
    PROCEDURE       reduce using rule 7 (declaration -> constantDefinitionBlock .)
    FUNCTION        reduce using rule 7 (declaration -> constantDefinitionBlock .)
    BEGIN           reduce using rule 7 (declaration -> constantDefinitionBlock .)


state 9

    (8) declaration -> typeDeclarationBlock .

    CONST           reduce using rule 8 (declaration -> typeDeclarationBlock .)
    TYPE            reduce using rule 8 (declaration -> typeDeclarationBlock .)
    VAR             reduce using rule 8 (declaration -> typeDeclarationBlock .)
    PROCEDURE       reduce using rule 8 (declaration -> typeDeclarationBlock .)
    FUNCTION        reduce using rule 8 (declaration -> typeDeclarationBlock .)
    BEGIN           reduce using rule 8 (declaration -> typeDeclarationBlock .)


state 10

    (9) declaration -> variableDeclarationBlock .

    CONST           reduce using rule 9 (declaration -> variableDeclarationBlock .)
    TYPE            reduce using rule 9 (declaration -> variableDeclarationBlock .)
    VAR             reduce using rule 9 (declaration -> variableDeclarationBlock .)
    PROCEDURE       reduce using rule 9 (declaration -> variableDeclarationBlock .)
    FUNCTION        reduce using rule 9 (declaration -> variableDeclarationBlock .)
    BEGIN           reduce using rule 9 (declaration -> variableDeclarationBlock .)


state 11

    (10) declaration -> procedureAndFunctionDeclarationBlock .

    CONST           reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    TYPE            reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    VAR             reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    PROCEDURE       reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    FUNCTION        reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)
    BEGIN           reduce using rule 10 (declaration -> procedureAndFunctionDeclarationBlock .)


state 12

    (11) constantDefinitionBlock -> CONST . constantDefinitionList
    (12) constantDefinitionList -> . constantDefinitionList constantDefinition SEMI
    (13) constantDefinitionList -> . constantDefinition SEMI
    (14) constantDefinition -> . identifier EQUAL constant
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    constantDefinitionList         shift and go to state 25
    constantDefinition             shift and go to state 26
    identifier                     shift and go to state 27

state 13

    (29) typeDeclarationBlock -> TYPE . typeDefinitionList
    (30) typeDefinitionList -> . typeDefinitionList typeDefinition SEMI
    (31) typeDefinitionList -> . typeDefinition SEMI
    (32) typeDefinition -> . identifier EQUAL type_
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    typeDefinitionList             shift and go to state 28
    typeDefinition                 shift and go to state 29
    identifier                     shift and go to state 30

state 14

    (76) variableDeclarationBlock -> VAR . variableDeclarationList SEMI
    (77) variableDeclarationList -> . variableDeclarationList SEMI variableDeclaration
    (78) variableDeclarationList -> . variableDeclaration
    (79) variableDeclaration -> . identifierList COLON type_
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    variableDeclarationList        shift and go to state 31
    variableDeclaration            shift and go to state 32
    identifierList                 shift and go to state 33
    identifier                     shift and go to state 34

state 15

    (80) procedureAndFunctionDeclarationBlock -> procedureDeclaration . SEMI

    SEMI            shift and go to state 35


state 16

    (81) procedureAndFunctionDeclarationBlock -> functionDeclaration . SEMI

    SEMI            shift and go to state 36


state 17

    (82) procedureDeclaration -> PROCEDURE . identifier SEMI block
    (83) procedureDeclaration -> PROCEDURE . identifier formalParameterList_opt SEMI block
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 37

state 18

    (94) functionDeclaration -> FUNCTION . identifier formalParameterList_opt COLON resultType SEMI block
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 38

state 19

    (2) programHeading -> PROGRAM identifier . SEMI

    SEMI            shift and go to state 39


state 20

    (3) identifier -> IDENT .

    SEMI            reduce using rule 3 (identifier -> IDENT .)
    EQUAL           reduce using rule 3 (identifier -> IDENT .)
    COLON           reduce using rule 3 (identifier -> IDENT .)
    COMMA           reduce using rule 3 (identifier -> IDENT .)
    LPAREN          reduce using rule 3 (identifier -> IDENT .)
    LBRACK          reduce using rule 3 (identifier -> IDENT .)
    END             reduce using rule 3 (identifier -> IDENT .)
    ASSIGN          reduce using rule 3 (identifier -> IDENT .)
    STAR            reduce using rule 3 (identifier -> IDENT .)
    SLASH           reduce using rule 3 (identifier -> IDENT .)
    DIV             reduce using rule 3 (identifier -> IDENT .)
    MOD             reduce using rule 3 (identifier -> IDENT .)
    AND             reduce using rule 3 (identifier -> IDENT .)
    NOT_EQUAL       reduce using rule 3 (identifier -> IDENT .)
    LT              reduce using rule 3 (identifier -> IDENT .)
    LE              reduce using rule 3 (identifier -> IDENT .)
    GT              reduce using rule 3 (identifier -> IDENT .)
    GE              reduce using rule 3 (identifier -> IDENT .)
    IN              reduce using rule 3 (identifier -> IDENT .)
    PLUS            reduce using rule 3 (identifier -> IDENT .)
    MINUS           reduce using rule 3 (identifier -> IDENT .)
    OR              reduce using rule 3 (identifier -> IDENT .)
    THEN            reduce using rule 3 (identifier -> IDENT .)
    DO              reduce using rule 3 (identifier -> IDENT .)
    UNTIL           reduce using rule 3 (identifier -> IDENT .)
    RPAREN          reduce using rule 3 (identifier -> IDENT .)
    RBRACK          reduce using rule 3 (identifier -> IDENT .)
    ELSE            reduce using rule 3 (identifier -> IDENT .)
    TO              reduce using rule 3 (identifier -> IDENT .)
    DOWNTO          reduce using rule 3 (identifier -> IDENT .)


state 21

    (1) program -> programHeading block DOT .

    $end            reduce using rule 1 (program -> programHeading block DOT .)


state 22

    (4) block -> declarations compoundStatement .

    DOT             reduce using rule 4 (block -> declarations compoundStatement .)
    SEMI            reduce using rule 4 (block -> declarations compoundStatement .)


state 23

    (96) compoundStatement -> BEGIN . statements END
    (97) statements -> . statementList
    (98) statementList -> . statementList SEMI statement
    (99) statementList -> . statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    END             reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    statements                     shift and go to state 40
    statementList                  shift and go to state 41
    statement                      shift and go to state 42
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    identifier                     shift and go to state 51
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 24

    (5) declarations -> declaration declarations .

    BEGIN           reduce using rule 5 (declarations -> declaration declarations .)


state 25

    (11) constantDefinitionBlock -> CONST constantDefinitionList .
    (12) constantDefinitionList -> constantDefinitionList . constantDefinition SEMI
    (14) constantDefinition -> . identifier EQUAL constant
    (3) identifier -> . IDENT

    CONST           reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    TYPE            reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    VAR             reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    PROCEDURE       reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    FUNCTION        reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    BEGIN           reduce using rule 11 (constantDefinitionBlock -> CONST constantDefinitionList .)
    IDENT           shift and go to state 20

    constantDefinition             shift and go to state 62
    identifier                     shift and go to state 27

state 26

    (13) constantDefinitionList -> constantDefinition . SEMI

    SEMI            shift and go to state 63


state 27

    (14) constantDefinition -> identifier . EQUAL constant

    EQUAL           shift and go to state 64


state 28

    (29) typeDeclarationBlock -> TYPE typeDefinitionList .
    (30) typeDefinitionList -> typeDefinitionList . typeDefinition SEMI
    (32) typeDefinition -> . identifier EQUAL type_
    (3) identifier -> . IDENT

    CONST           reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    TYPE            reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    VAR             reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    PROCEDURE       reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    FUNCTION        reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    BEGIN           reduce using rule 29 (typeDeclarationBlock -> TYPE typeDefinitionList .)
    IDENT           shift and go to state 20

    typeDefinition                 shift and go to state 65
    identifier                     shift and go to state 30

state 29

    (31) typeDefinitionList -> typeDefinition . SEMI

    SEMI            shift and go to state 66


state 30

    (32) typeDefinition -> identifier . EQUAL type_

    EQUAL           shift and go to state 67


state 31

    (76) variableDeclarationBlock -> VAR variableDeclarationList . SEMI
    (77) variableDeclarationList -> variableDeclarationList . SEMI variableDeclaration

    SEMI            shift and go to state 68


state 32

    (78) variableDeclarationList -> variableDeclaration .

    SEMI            reduce using rule 78 (variableDeclarationList -> variableDeclaration .)


state 33

    (79) variableDeclaration -> identifierList . COLON type_
    (39) identifierList -> identifierList . COMMA identifier

    COLON           shift and go to state 69
    COMMA           shift and go to state 70


state 34

    (40) identifierList -> identifier .

    COLON           reduce using rule 40 (identifierList -> identifier .)
    COMMA           reduce using rule 40 (identifierList -> identifier .)
    RPAREN          reduce using rule 40 (identifierList -> identifier .)


state 35

    (80) procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI .

    CONST           reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI .)
    TYPE            reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI .)
    VAR             reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI .)
    PROCEDURE       reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI .)
    FUNCTION        reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI .)
    BEGIN           reduce using rule 80 (procedureAndFunctionDeclarationBlock -> procedureDeclaration SEMI .)


state 36

    (81) procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI .

    CONST           reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI .)
    TYPE            reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI .)
    VAR             reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI .)
    PROCEDURE       reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI .)
    FUNCTION        reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI .)
    BEGIN           reduce using rule 81 (procedureAndFunctionDeclarationBlock -> functionDeclaration SEMI .)


state 37

    (82) procedureDeclaration -> PROCEDURE identifier . SEMI block
    (83) procedureDeclaration -> PROCEDURE identifier . formalParameterList_opt SEMI block
    (84) formalParameterList_opt -> . formalParameterList
    (85) formalParameterList_opt -> . empty
    (86) formalParameterList -> . LPAREN formalParameterSectionList RPAREN
    (163) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 71
    LPAREN          shift and go to state 75

  ! SEMI            [ reduce using rule 163 (empty -> .) ]

    formalParameterList_opt        shift and go to state 72
    formalParameterList            shift and go to state 73
    empty                          shift and go to state 74

state 38

    (94) functionDeclaration -> FUNCTION identifier . formalParameterList_opt COLON resultType SEMI block
    (84) formalParameterList_opt -> . formalParameterList
    (85) formalParameterList_opt -> . empty
    (86) formalParameterList -> . LPAREN formalParameterSectionList RPAREN
    (163) empty -> .

    LPAREN          shift and go to state 75
    COLON           reduce using rule 163 (empty -> .)

    formalParameterList_opt        shift and go to state 76
    formalParameterList            shift and go to state 73
    empty                          shift and go to state 74

state 39

    (2) programHeading -> PROGRAM identifier SEMI .

    CONST           reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    TYPE            reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    VAR             reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    PROCEDURE       reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    FUNCTION        reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)
    BEGIN           reduce using rule 2 (programHeading -> PROGRAM identifier SEMI .)


state 40

    (96) compoundStatement -> BEGIN statements . END

    END             shift and go to state 77


state 41

    (97) statements -> statementList .
    (98) statementList -> statementList . SEMI statement

    END             reduce using rule 97 (statements -> statementList .)
    UNTIL           reduce using rule 97 (statements -> statementList .)
    SEMI            shift and go to state 78


state 42

    (99) statementList -> statement .

    SEMI            reduce using rule 99 (statementList -> statement .)
    END             reduce using rule 99 (statementList -> statement .)
    UNTIL           reduce using rule 99 (statementList -> statement .)


state 43

    (100) statement -> simpleStatement .

    SEMI            reduce using rule 100 (statement -> simpleStatement .)
    END             reduce using rule 100 (statement -> simpleStatement .)
    UNTIL           reduce using rule 100 (statement -> simpleStatement .)
    ELSE            reduce using rule 100 (statement -> simpleStatement .)


state 44

    (101) statement -> structuredStatement .

    SEMI            reduce using rule 101 (statement -> structuredStatement .)
    END             reduce using rule 101 (statement -> structuredStatement .)
    UNTIL           reduce using rule 101 (statement -> structuredStatement .)
    ELSE            reduce using rule 101 (statement -> structuredStatement .)


state 45

    (102) simpleStatement -> callStatement .

    SEMI            reduce using rule 102 (simpleStatement -> callStatement .)
    END             reduce using rule 102 (simpleStatement -> callStatement .)
    UNTIL           reduce using rule 102 (simpleStatement -> callStatement .)
    ELSE            reduce using rule 102 (simpleStatement -> callStatement .)


state 46

    (103) simpleStatement -> assignmentStatement .

    SEMI            reduce using rule 103 (simpleStatement -> assignmentStatement .)
    END             reduce using rule 103 (simpleStatement -> assignmentStatement .)
    UNTIL           reduce using rule 103 (simpleStatement -> assignmentStatement .)
    ELSE            reduce using rule 103 (simpleStatement -> assignmentStatement .)


state 47

    (104) simpleStatement -> emptyStatement_ .

    SEMI            reduce using rule 104 (simpleStatement -> emptyStatement_ .)
    END             reduce using rule 104 (simpleStatement -> emptyStatement_ .)
    UNTIL           reduce using rule 104 (simpleStatement -> emptyStatement_ .)
    ELSE            reduce using rule 104 (simpleStatement -> emptyStatement_ .)


state 48

    (148) structuredStatement -> compoundStatement .

    SEMI            reduce using rule 148 (structuredStatement -> compoundStatement .)
    END             reduce using rule 148 (structuredStatement -> compoundStatement .)
    UNTIL           reduce using rule 148 (structuredStatement -> compoundStatement .)
    ELSE            reduce using rule 148 (structuredStatement -> compoundStatement .)


state 49

    (149) structuredStatement -> conditionalStatement .

    SEMI            reduce using rule 149 (structuredStatement -> conditionalStatement .)
    END             reduce using rule 149 (structuredStatement -> conditionalStatement .)
    UNTIL           reduce using rule 149 (structuredStatement -> conditionalStatement .)
    ELSE            reduce using rule 149 (structuredStatement -> conditionalStatement .)


state 50

    (150) structuredStatement -> loopStatement .

    SEMI            reduce using rule 150 (structuredStatement -> loopStatement .)
    END             reduce using rule 150 (structuredStatement -> loopStatement .)
    UNTIL           reduce using rule 150 (structuredStatement -> loopStatement .)
    ELSE            reduce using rule 150 (structuredStatement -> loopStatement .)


state 51

    (139) callStatement -> identifier .
    (140) callStatement -> identifier . LPAREN expressionList RPAREN
    (106) variable -> identifier .
    (108) indexedVariable -> identifier . LBRACK expression RBRACK

  ! reduce/reduce conflict for SEMI resolved using rule 106 (variable -> identifier .)
  ! reduce/reduce conflict for END resolved using rule 106 (variable -> identifier .)
  ! reduce/reduce conflict for UNTIL resolved using rule 106 (variable -> identifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 106 (variable -> identifier .)
  ! reduce/reduce conflict for TO resolved using rule 106 (variable -> identifier .)
  ! reduce/reduce conflict for DOWNTO resolved using rule 106 (variable -> identifier .)
  ! reduce/reduce conflict for DO resolved using rule 106 (variable -> identifier .)
    LPAREN          shift and go to state 79
    ASSIGN          reduce using rule 106 (variable -> identifier .)
    STAR            reduce using rule 106 (variable -> identifier .)
    SLASH           reduce using rule 106 (variable -> identifier .)
    DIV             reduce using rule 106 (variable -> identifier .)
    MOD             reduce using rule 106 (variable -> identifier .)
    AND             reduce using rule 106 (variable -> identifier .)
    EQUAL           reduce using rule 106 (variable -> identifier .)
    NOT_EQUAL       reduce using rule 106 (variable -> identifier .)
    LT              reduce using rule 106 (variable -> identifier .)
    LE              reduce using rule 106 (variable -> identifier .)
    GT              reduce using rule 106 (variable -> identifier .)
    GE              reduce using rule 106 (variable -> identifier .)
    IN              reduce using rule 106 (variable -> identifier .)
    PLUS            reduce using rule 106 (variable -> identifier .)
    MINUS           reduce using rule 106 (variable -> identifier .)
    OR              reduce using rule 106 (variable -> identifier .)
    SEMI            reduce using rule 106 (variable -> identifier .)
    END             reduce using rule 106 (variable -> identifier .)
    UNTIL           reduce using rule 106 (variable -> identifier .)
    ELSE            reduce using rule 106 (variable -> identifier .)
    TO              reduce using rule 106 (variable -> identifier .)
    DOWNTO          reduce using rule 106 (variable -> identifier .)
    DO              reduce using rule 106 (variable -> identifier .)
    LBRACK          shift and go to state 80

  ! SEMI            [ reduce using rule 139 (callStatement -> identifier .) ]
  ! END             [ reduce using rule 139 (callStatement -> identifier .) ]
  ! UNTIL           [ reduce using rule 139 (callStatement -> identifier .) ]
  ! ELSE            [ reduce using rule 139 (callStatement -> identifier .) ]
  ! TO              [ reduce using rule 139 (callStatement -> identifier .) ]
  ! DOWNTO          [ reduce using rule 139 (callStatement -> identifier .) ]
  ! DO              [ reduce using rule 139 (callStatement -> identifier .) ]


state 52

    (105) assignmentStatement -> variable . ASSIGN Init_Final

    ASSIGN          shift and go to state 81


state 53

    (160) conditionalStatement -> ifStatement .

    SEMI            reduce using rule 160 (conditionalStatement -> ifStatement .)
    END             reduce using rule 160 (conditionalStatement -> ifStatement .)
    UNTIL           reduce using rule 160 (conditionalStatement -> ifStatement .)
    ELSE            reduce using rule 160 (conditionalStatement -> ifStatement .)


state 54

    (151) loopStatement -> forStatement .

    SEMI            reduce using rule 151 (loopStatement -> forStatement .)
    END             reduce using rule 151 (loopStatement -> forStatement .)
    UNTIL           reduce using rule 151 (loopStatement -> forStatement .)
    ELSE            reduce using rule 151 (loopStatement -> forStatement .)


state 55

    (152) loopStatement -> whileStatement .

    SEMI            reduce using rule 152 (loopStatement -> whileStatement .)
    END             reduce using rule 152 (loopStatement -> whileStatement .)
    UNTIL           reduce using rule 152 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 152 (loopStatement -> whileStatement .)


state 56

    (153) loopStatement -> repeatStatement .

    SEMI            reduce using rule 153 (loopStatement -> repeatStatement .)
    END             reduce using rule 153 (loopStatement -> repeatStatement .)
    UNTIL           reduce using rule 153 (loopStatement -> repeatStatement .)
    ELSE            reduce using rule 153 (loopStatement -> repeatStatement .)


state 57

    (107) variable -> indexedVariable .

    ASSIGN          reduce using rule 107 (variable -> indexedVariable .)
    STAR            reduce using rule 107 (variable -> indexedVariable .)
    SLASH           reduce using rule 107 (variable -> indexedVariable .)
    DIV             reduce using rule 107 (variable -> indexedVariable .)
    MOD             reduce using rule 107 (variable -> indexedVariable .)
    AND             reduce using rule 107 (variable -> indexedVariable .)
    EQUAL           reduce using rule 107 (variable -> indexedVariable .)
    NOT_EQUAL       reduce using rule 107 (variable -> indexedVariable .)
    LT              reduce using rule 107 (variable -> indexedVariable .)
    LE              reduce using rule 107 (variable -> indexedVariable .)
    GT              reduce using rule 107 (variable -> indexedVariable .)
    GE              reduce using rule 107 (variable -> indexedVariable .)
    IN              reduce using rule 107 (variable -> indexedVariable .)
    PLUS            reduce using rule 107 (variable -> indexedVariable .)
    MINUS           reduce using rule 107 (variable -> indexedVariable .)
    OR              reduce using rule 107 (variable -> indexedVariable .)
    THEN            reduce using rule 107 (variable -> indexedVariable .)
    DO              reduce using rule 107 (variable -> indexedVariable .)
    COLON           reduce using rule 107 (variable -> indexedVariable .)
    RPAREN          reduce using rule 107 (variable -> indexedVariable .)
    COMMA           reduce using rule 107 (variable -> indexedVariable .)
    RBRACK          reduce using rule 107 (variable -> indexedVariable .)
    SEMI            reduce using rule 107 (variable -> indexedVariable .)
    END             reduce using rule 107 (variable -> indexedVariable .)
    UNTIL           reduce using rule 107 (variable -> indexedVariable .)
    ELSE            reduce using rule 107 (variable -> indexedVariable .)
    TO              reduce using rule 107 (variable -> indexedVariable .)
    DOWNTO          reduce using rule 107 (variable -> indexedVariable .)


state 58

    (161) ifStatement -> IF . expression THEN statement
    (162) ifStatement -> IF . expression THEN statement ELSE statement
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    expression                     shift and go to state 82
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 59

    (154) forStatement -> FOR . identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> FOR . identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 103

state 60

    (158) whileStatement -> WHILE . expression DO statement
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    expression                     shift and go to state 104
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 61

    (159) repeatStatement -> REPEAT . statements UNTIL expression
    (97) statements -> . statementList
    (98) statementList -> . statementList SEMI statement
    (99) statementList -> . statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    UNTIL           reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    statements                     shift and go to state 105
    statementList                  shift and go to state 41
    statement                      shift and go to state 42
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    identifier                     shift and go to state 51
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 62

    (12) constantDefinitionList -> constantDefinitionList constantDefinition . SEMI

    SEMI            shift and go to state 106


state 63

    (13) constantDefinitionList -> constantDefinition SEMI .

    IDENT           reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    CONST           reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    TYPE            reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    VAR             reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    PROCEDURE       reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    FUNCTION        reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)
    BEGIN           reduce using rule 13 (constantDefinitionList -> constantDefinition SEMI .)


state 64

    (14) constantDefinition -> identifier EQUAL . constant
    (15) constant -> . unsignedNumber
    (16) constant -> . sign unsignedNumber
    (17) constant -> . identifier
    (18) constant -> . sign identifier
    (19) constant -> . string
    (20) constant -> . constantChr
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (3) identifier -> . IDENT
    (27) string -> . STRING_LITERAL
    (28) constantChr -> . CHR LPAREN unsignedInteger RPAREN
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    CHR             shift and go to state 113
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    identifier                     shift and go to state 107
    constant                       shift and go to state 108
    unsignedNumber                 shift and go to state 109
    sign                           shift and go to state 110
    string                         shift and go to state 111
    constantChr                    shift and go to state 112
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 65

    (30) typeDefinitionList -> typeDefinitionList typeDefinition . SEMI

    SEMI            shift and go to state 114


state 66

    (31) typeDefinitionList -> typeDefinition SEMI .

    IDENT           reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    CONST           reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    TYPE            reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    VAR             reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    PROCEDURE       reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    FUNCTION        reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)
    BEGIN           reduce using rule 31 (typeDefinitionList -> typeDefinition SEMI .)


state 67

    (32) typeDefinition -> identifier EQUAL . type_
    (33) type_ -> . scalarType
    (34) type_ -> . subrangeType
    (35) type_ -> . typeIdentifier
    (36) type_ -> . stringType
    (37) type_ -> . arrayType
    (38) scalarType -> . LPAREN identifierList RPAREN
    (41) subrangeType -> . unsignedInteger DOTDOT unsignedInteger
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (43) stringType -> . STRING LBRACK unsignedInteger RBRACK
    (47) arrayType -> . ARRAY LBRACK subrangeType RBRACK OF typeIdentifier
    (23) unsignedInteger -> . NUM_INT
    (3) identifier -> . IDENT

    LPAREN          shift and go to state 122
    INTEGER         shift and go to state 124
    REAL            shift and go to state 125
    BOOLEAN         shift and go to state 126
    CHAR            shift and go to state 127
    STRING          shift and go to state 128
    ARRAY           shift and go to state 129
    NUM_INT         shift and go to state 101
    IDENT           shift and go to state 20

    identifier                     shift and go to state 115
    type_                          shift and go to state 116
    scalarType                     shift and go to state 117
    subrangeType                   shift and go to state 118
    typeIdentifier                 shift and go to state 119
    stringType                     shift and go to state 120
    arrayType                      shift and go to state 121
    unsignedInteger                shift and go to state 123

state 68

    (76) variableDeclarationBlock -> VAR variableDeclarationList SEMI .
    (77) variableDeclarationList -> variableDeclarationList SEMI . variableDeclaration
    (79) variableDeclaration -> . identifierList COLON type_
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    CONST           reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    TYPE            reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    VAR             reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    PROCEDURE       reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    FUNCTION        reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    BEGIN           reduce using rule 76 (variableDeclarationBlock -> VAR variableDeclarationList SEMI .)
    IDENT           shift and go to state 20

    variableDeclaration            shift and go to state 130
    identifierList                 shift and go to state 33
    identifier                     shift and go to state 34

state 69

    (79) variableDeclaration -> identifierList COLON . type_
    (33) type_ -> . scalarType
    (34) type_ -> . subrangeType
    (35) type_ -> . typeIdentifier
    (36) type_ -> . stringType
    (37) type_ -> . arrayType
    (38) scalarType -> . LPAREN identifierList RPAREN
    (41) subrangeType -> . unsignedInteger DOTDOT unsignedInteger
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (43) stringType -> . STRING LBRACK unsignedInteger RBRACK
    (47) arrayType -> . ARRAY LBRACK subrangeType RBRACK OF typeIdentifier
    (23) unsignedInteger -> . NUM_INT
    (3) identifier -> . IDENT

    LPAREN          shift and go to state 122
    INTEGER         shift and go to state 124
    REAL            shift and go to state 125
    BOOLEAN         shift and go to state 126
    CHAR            shift and go to state 127
    STRING          shift and go to state 128
    ARRAY           shift and go to state 129
    NUM_INT         shift and go to state 101
    IDENT           shift and go to state 20

    type_                          shift and go to state 131
    scalarType                     shift and go to state 117
    subrangeType                   shift and go to state 118
    typeIdentifier                 shift and go to state 119
    stringType                     shift and go to state 120
    arrayType                      shift and go to state 121
    unsignedInteger                shift and go to state 123
    identifier                     shift and go to state 115

state 70

    (39) identifierList -> identifierList COMMA . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifier                     shift and go to state 132

state 71

    (82) procedureDeclaration -> PROCEDURE identifier SEMI . block
    (4) block -> . declarations compoundStatement
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (163) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration SEMI
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration SEMI
    (82) procedureDeclaration -> . PROCEDURE identifier SEMI block
    (83) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (94) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 163 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    block                          shift and go to state 133
    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 72

    (83) procedureDeclaration -> PROCEDURE identifier formalParameterList_opt . SEMI block

    SEMI            shift and go to state 134


state 73

    (84) formalParameterList_opt -> formalParameterList .

    SEMI            reduce using rule 84 (formalParameterList_opt -> formalParameterList .)
    COLON           reduce using rule 84 (formalParameterList_opt -> formalParameterList .)


state 74

    (85) formalParameterList_opt -> empty .

    SEMI            reduce using rule 85 (formalParameterList_opt -> empty .)
    COLON           reduce using rule 85 (formalParameterList_opt -> empty .)


state 75

    (86) formalParameterList -> LPAREN . formalParameterSectionList RPAREN
    (87) formalParameterSectionList -> . formalParameterSectionList SEMI formalParameterSection
    (88) formalParameterSectionList -> . formalParameterSection
    (89) formalParameterSection -> . parameterGroup
    (90) formalParameterSection -> . VAR parameterGroup
    (91) formalParameterSection -> . FUNCTION parameterGroup
    (92) formalParameterSection -> . PROCEDURE parameterGroup
    (93) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    VAR             shift and go to state 138
    FUNCTION        shift and go to state 139
    PROCEDURE       shift and go to state 140
    IDENT           shift and go to state 20

    formalParameterSectionList     shift and go to state 135
    formalParameterSection         shift and go to state 136
    parameterGroup                 shift and go to state 137
    identifierList                 shift and go to state 141
    identifier                     shift and go to state 34

state 76

    (94) functionDeclaration -> FUNCTION identifier formalParameterList_opt . COLON resultType SEMI block

    COLON           shift and go to state 142


state 77

    (96) compoundStatement -> BEGIN statements END .

    DOT             reduce using rule 96 (compoundStatement -> BEGIN statements END .)
    SEMI            reduce using rule 96 (compoundStatement -> BEGIN statements END .)
    END             reduce using rule 96 (compoundStatement -> BEGIN statements END .)
    UNTIL           reduce using rule 96 (compoundStatement -> BEGIN statements END .)
    ELSE            reduce using rule 96 (compoundStatement -> BEGIN statements END .)


state 78

    (98) statementList -> statementList SEMI . statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    END             reduce using rule 147 (emptyStatement_ -> .)
    UNTIL           reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    statement                      shift and go to state 143
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    identifier                     shift and go to state 51
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 79

    (140) callStatement -> identifier LPAREN . expressionList RPAREN
    (141) expressionList -> . expressionList COMMA expression
    (142) expressionList -> . expressionList COMMA formattedExpression
    (143) expressionList -> . expression
    (144) expressionList -> . formattedExpression
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (145) formattedExpression -> . variable COLON expression COLON expression
    (146) formattedExpression -> . variable COLON expression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    IDENT           shift and go to state 20
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    identifier                     shift and go to state 92
    expressionList                 shift and go to state 144
    expression                     shift and go to state 145
    formattedExpression            shift and go to state 146
    simpleExpression               shift and go to state 83
    variable                       shift and go to state 147
    term                           shift and go to state 84
    sign                           shift and go to state 85
    indexedVariable                shift and go to state 57
    factor                         shift and go to state 86
    unsignedConstant               shift and go to state 90
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 80

    (108) indexedVariable -> identifier LBRACK . expression RBRACK
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    identifier                     shift and go to state 92
    expression                     shift and go to state 148
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 81

    (105) assignmentStatement -> variable ASSIGN . Init_Final
    (156) Init_Final -> . callStatement
    (157) Init_Final -> . expression
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (3) identifier -> . IDENT
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    IDENT           shift and go to state 20
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    variable                       shift and go to state 89
    Init_Final                     shift and go to state 149
    callStatement                  shift and go to state 150
    expression                     shift and go to state 151
    identifier                     shift and go to state 51
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    unsignedConstant               shift and go to state 90
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 82

    (161) ifStatement -> IF expression . THEN statement
    (162) ifStatement -> IF expression . THEN statement ELSE statement

    THEN            shift and go to state 152


state 83

    (109) expression -> simpleExpression .
    (110) expression -> simpleExpression . relationalOperator simpleExpression
    (120) simpleExpression -> simpleExpression . additiveOperator term
    (111) relationalOperator -> . EQUAL
    (112) relationalOperator -> . NOT_EQUAL
    (113) relationalOperator -> . LT
    (114) relationalOperator -> . LE
    (115) relationalOperator -> . GT
    (116) relationalOperator -> . GE
    (117) relationalOperator -> . IN
    (121) additiveOperator -> . PLUS
    (122) additiveOperator -> . MINUS
    (123) additiveOperator -> . OR

    THEN            reduce using rule 109 (expression -> simpleExpression .)
    DO              reduce using rule 109 (expression -> simpleExpression .)
    RPAREN          reduce using rule 109 (expression -> simpleExpression .)
    COMMA           reduce using rule 109 (expression -> simpleExpression .)
    RBRACK          reduce using rule 109 (expression -> simpleExpression .)
    SEMI            reduce using rule 109 (expression -> simpleExpression .)
    END             reduce using rule 109 (expression -> simpleExpression .)
    UNTIL           reduce using rule 109 (expression -> simpleExpression .)
    ELSE            reduce using rule 109 (expression -> simpleExpression .)
    TO              reduce using rule 109 (expression -> simpleExpression .)
    DOWNTO          reduce using rule 109 (expression -> simpleExpression .)
    COLON           reduce using rule 109 (expression -> simpleExpression .)
    EQUAL           shift and go to state 155
    NOT_EQUAL       shift and go to state 156
    LT              shift and go to state 157
    LE              shift and go to state 158
    GT              shift and go to state 159
    GE              shift and go to state 160
    IN              shift and go to state 161
    PLUS            shift and go to state 162
    MINUS           shift and go to state 163
    OR              shift and go to state 164

    relationalOperator             shift and go to state 153
    additiveOperator               shift and go to state 154

state 84

    (118) simpleExpression -> term .
    (125) term -> term . multiplicativeOperator factor
    (126) multiplicativeOperator -> . STAR
    (127) multiplicativeOperator -> . SLASH
    (128) multiplicativeOperator -> . DIV
    (129) multiplicativeOperator -> . MOD
    (130) multiplicativeOperator -> . AND

    EQUAL           reduce using rule 118 (simpleExpression -> term .)
    NOT_EQUAL       reduce using rule 118 (simpleExpression -> term .)
    LT              reduce using rule 118 (simpleExpression -> term .)
    LE              reduce using rule 118 (simpleExpression -> term .)
    GT              reduce using rule 118 (simpleExpression -> term .)
    GE              reduce using rule 118 (simpleExpression -> term .)
    IN              reduce using rule 118 (simpleExpression -> term .)
    PLUS            reduce using rule 118 (simpleExpression -> term .)
    MINUS           reduce using rule 118 (simpleExpression -> term .)
    OR              reduce using rule 118 (simpleExpression -> term .)
    THEN            reduce using rule 118 (simpleExpression -> term .)
    DO              reduce using rule 118 (simpleExpression -> term .)
    RPAREN          reduce using rule 118 (simpleExpression -> term .)
    COMMA           reduce using rule 118 (simpleExpression -> term .)
    RBRACK          reduce using rule 118 (simpleExpression -> term .)
    SEMI            reduce using rule 118 (simpleExpression -> term .)
    END             reduce using rule 118 (simpleExpression -> term .)
    UNTIL           reduce using rule 118 (simpleExpression -> term .)
    ELSE            reduce using rule 118 (simpleExpression -> term .)
    TO              reduce using rule 118 (simpleExpression -> term .)
    DOWNTO          reduce using rule 118 (simpleExpression -> term .)
    COLON           reduce using rule 118 (simpleExpression -> term .)
    STAR            shift and go to state 166
    SLASH           shift and go to state 167
    DIV             shift and go to state 168
    MOD             shift and go to state 169
    AND             shift and go to state 170

    multiplicativeOperator         shift and go to state 165

state 85

    (119) simpleExpression -> sign . term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    term                           shift and go to state 171
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 86

    (124) term -> factor .

    STAR            reduce using rule 124 (term -> factor .)
    SLASH           reduce using rule 124 (term -> factor .)
    DIV             reduce using rule 124 (term -> factor .)
    MOD             reduce using rule 124 (term -> factor .)
    AND             reduce using rule 124 (term -> factor .)
    EQUAL           reduce using rule 124 (term -> factor .)
    NOT_EQUAL       reduce using rule 124 (term -> factor .)
    LT              reduce using rule 124 (term -> factor .)
    LE              reduce using rule 124 (term -> factor .)
    GT              reduce using rule 124 (term -> factor .)
    GE              reduce using rule 124 (term -> factor .)
    IN              reduce using rule 124 (term -> factor .)
    PLUS            reduce using rule 124 (term -> factor .)
    MINUS           reduce using rule 124 (term -> factor .)
    OR              reduce using rule 124 (term -> factor .)
    THEN            reduce using rule 124 (term -> factor .)
    DO              reduce using rule 124 (term -> factor .)
    RPAREN          reduce using rule 124 (term -> factor .)
    COMMA           reduce using rule 124 (term -> factor .)
    RBRACK          reduce using rule 124 (term -> factor .)
    SEMI            reduce using rule 124 (term -> factor .)
    END             reduce using rule 124 (term -> factor .)
    UNTIL           reduce using rule 124 (term -> factor .)
    ELSE            reduce using rule 124 (term -> factor .)
    TO              reduce using rule 124 (term -> factor .)
    DOWNTO          reduce using rule 124 (term -> factor .)
    COLON           reduce using rule 124 (term -> factor .)


state 87

    (25) sign -> PLUS .

    LPAREN          reduce using rule 25 (sign -> PLUS .)
    NIL             reduce using rule 25 (sign -> PLUS .)
    TRUE            reduce using rule 25 (sign -> PLUS .)
    FALSE           reduce using rule 25 (sign -> PLUS .)
    IDENT           reduce using rule 25 (sign -> PLUS .)
    STRING_LITERAL  reduce using rule 25 (sign -> PLUS .)
    NUM_INT         reduce using rule 25 (sign -> PLUS .)
    NUM_REAL        reduce using rule 25 (sign -> PLUS .)


state 88

    (26) sign -> MINUS .

    LPAREN          reduce using rule 26 (sign -> MINUS .)
    NIL             reduce using rule 26 (sign -> MINUS .)
    TRUE            reduce using rule 26 (sign -> MINUS .)
    FALSE           reduce using rule 26 (sign -> MINUS .)
    IDENT           reduce using rule 26 (sign -> MINUS .)
    STRING_LITERAL  reduce using rule 26 (sign -> MINUS .)
    NUM_INT         reduce using rule 26 (sign -> MINUS .)
    NUM_REAL        reduce using rule 26 (sign -> MINUS .)


state 89

    (131) factor -> variable .

    STAR            reduce using rule 131 (factor -> variable .)
    SLASH           reduce using rule 131 (factor -> variable .)
    DIV             reduce using rule 131 (factor -> variable .)
    MOD             reduce using rule 131 (factor -> variable .)
    AND             reduce using rule 131 (factor -> variable .)
    EQUAL           reduce using rule 131 (factor -> variable .)
    NOT_EQUAL       reduce using rule 131 (factor -> variable .)
    LT              reduce using rule 131 (factor -> variable .)
    LE              reduce using rule 131 (factor -> variable .)
    GT              reduce using rule 131 (factor -> variable .)
    GE              reduce using rule 131 (factor -> variable .)
    IN              reduce using rule 131 (factor -> variable .)
    PLUS            reduce using rule 131 (factor -> variable .)
    MINUS           reduce using rule 131 (factor -> variable .)
    OR              reduce using rule 131 (factor -> variable .)
    THEN            reduce using rule 131 (factor -> variable .)
    DO              reduce using rule 131 (factor -> variable .)
    RBRACK          reduce using rule 131 (factor -> variable .)
    SEMI            reduce using rule 131 (factor -> variable .)
    END             reduce using rule 131 (factor -> variable .)
    UNTIL           reduce using rule 131 (factor -> variable .)
    ELSE            reduce using rule 131 (factor -> variable .)
    RPAREN          reduce using rule 131 (factor -> variable .)
    COMMA           reduce using rule 131 (factor -> variable .)
    TO              reduce using rule 131 (factor -> variable .)
    DOWNTO          reduce using rule 131 (factor -> variable .)
    COLON           reduce using rule 131 (factor -> variable .)


state 90

    (132) factor -> unsignedConstant .

    STAR            reduce using rule 132 (factor -> unsignedConstant .)
    SLASH           reduce using rule 132 (factor -> unsignedConstant .)
    DIV             reduce using rule 132 (factor -> unsignedConstant .)
    MOD             reduce using rule 132 (factor -> unsignedConstant .)
    AND             reduce using rule 132 (factor -> unsignedConstant .)
    EQUAL           reduce using rule 132 (factor -> unsignedConstant .)
    NOT_EQUAL       reduce using rule 132 (factor -> unsignedConstant .)
    LT              reduce using rule 132 (factor -> unsignedConstant .)
    LE              reduce using rule 132 (factor -> unsignedConstant .)
    GT              reduce using rule 132 (factor -> unsignedConstant .)
    GE              reduce using rule 132 (factor -> unsignedConstant .)
    IN              reduce using rule 132 (factor -> unsignedConstant .)
    PLUS            reduce using rule 132 (factor -> unsignedConstant .)
    MINUS           reduce using rule 132 (factor -> unsignedConstant .)
    OR              reduce using rule 132 (factor -> unsignedConstant .)
    THEN            reduce using rule 132 (factor -> unsignedConstant .)
    DO              reduce using rule 132 (factor -> unsignedConstant .)
    RPAREN          reduce using rule 132 (factor -> unsignedConstant .)
    COMMA           reduce using rule 132 (factor -> unsignedConstant .)
    RBRACK          reduce using rule 132 (factor -> unsignedConstant .)
    SEMI            reduce using rule 132 (factor -> unsignedConstant .)
    END             reduce using rule 132 (factor -> unsignedConstant .)
    UNTIL           reduce using rule 132 (factor -> unsignedConstant .)
    ELSE            reduce using rule 132 (factor -> unsignedConstant .)
    TO              reduce using rule 132 (factor -> unsignedConstant .)
    DOWNTO          reduce using rule 132 (factor -> unsignedConstant .)
    COLON           reduce using rule 132 (factor -> unsignedConstant .)


state 91

    (133) factor -> LPAREN . expression RPAREN
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    expression                     shift and go to state 172
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 92

    (106) variable -> identifier .
    (108) indexedVariable -> identifier . LBRACK expression RBRACK

    STAR            reduce using rule 106 (variable -> identifier .)
    SLASH           reduce using rule 106 (variable -> identifier .)
    DIV             reduce using rule 106 (variable -> identifier .)
    MOD             reduce using rule 106 (variable -> identifier .)
    AND             reduce using rule 106 (variable -> identifier .)
    EQUAL           reduce using rule 106 (variable -> identifier .)
    NOT_EQUAL       reduce using rule 106 (variable -> identifier .)
    LT              reduce using rule 106 (variable -> identifier .)
    LE              reduce using rule 106 (variable -> identifier .)
    GT              reduce using rule 106 (variable -> identifier .)
    GE              reduce using rule 106 (variable -> identifier .)
    IN              reduce using rule 106 (variable -> identifier .)
    PLUS            reduce using rule 106 (variable -> identifier .)
    MINUS           reduce using rule 106 (variable -> identifier .)
    OR              reduce using rule 106 (variable -> identifier .)
    THEN            reduce using rule 106 (variable -> identifier .)
    DO              reduce using rule 106 (variable -> identifier .)
    COLON           reduce using rule 106 (variable -> identifier .)
    RPAREN          reduce using rule 106 (variable -> identifier .)
    COMMA           reduce using rule 106 (variable -> identifier .)
    RBRACK          reduce using rule 106 (variable -> identifier .)
    SEMI            reduce using rule 106 (variable -> identifier .)
    END             reduce using rule 106 (variable -> identifier .)
    UNTIL           reduce using rule 106 (variable -> identifier .)
    ELSE            reduce using rule 106 (variable -> identifier .)
    TO              reduce using rule 106 (variable -> identifier .)
    DOWNTO          reduce using rule 106 (variable -> identifier .)
    LBRACK          shift and go to state 80


state 93

    (134) unsignedConstant -> unsignedNumber .

    STAR            reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    SLASH           reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    DIV             reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    MOD             reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    AND             reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    EQUAL           reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    NOT_EQUAL       reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    LT              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    LE              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    GT              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    GE              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    IN              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    PLUS            reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    MINUS           reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    OR              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    THEN            reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    DO              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    RPAREN          reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    COMMA           reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    RBRACK          reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    SEMI            reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    END             reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    UNTIL           reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    ELSE            reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    TO              reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    DOWNTO          reduce using rule 134 (unsignedConstant -> unsignedNumber .)
    COLON           reduce using rule 134 (unsignedConstant -> unsignedNumber .)


state 94

    (135) unsignedConstant -> string .

    STAR            reduce using rule 135 (unsignedConstant -> string .)
    SLASH           reduce using rule 135 (unsignedConstant -> string .)
    DIV             reduce using rule 135 (unsignedConstant -> string .)
    MOD             reduce using rule 135 (unsignedConstant -> string .)
    AND             reduce using rule 135 (unsignedConstant -> string .)
    EQUAL           reduce using rule 135 (unsignedConstant -> string .)
    NOT_EQUAL       reduce using rule 135 (unsignedConstant -> string .)
    LT              reduce using rule 135 (unsignedConstant -> string .)
    LE              reduce using rule 135 (unsignedConstant -> string .)
    GT              reduce using rule 135 (unsignedConstant -> string .)
    GE              reduce using rule 135 (unsignedConstant -> string .)
    IN              reduce using rule 135 (unsignedConstant -> string .)
    PLUS            reduce using rule 135 (unsignedConstant -> string .)
    MINUS           reduce using rule 135 (unsignedConstant -> string .)
    OR              reduce using rule 135 (unsignedConstant -> string .)
    THEN            reduce using rule 135 (unsignedConstant -> string .)
    DO              reduce using rule 135 (unsignedConstant -> string .)
    RPAREN          reduce using rule 135 (unsignedConstant -> string .)
    COMMA           reduce using rule 135 (unsignedConstant -> string .)
    RBRACK          reduce using rule 135 (unsignedConstant -> string .)
    SEMI            reduce using rule 135 (unsignedConstant -> string .)
    END             reduce using rule 135 (unsignedConstant -> string .)
    UNTIL           reduce using rule 135 (unsignedConstant -> string .)
    ELSE            reduce using rule 135 (unsignedConstant -> string .)
    TO              reduce using rule 135 (unsignedConstant -> string .)
    DOWNTO          reduce using rule 135 (unsignedConstant -> string .)
    COLON           reduce using rule 135 (unsignedConstant -> string .)


state 95

    (136) unsignedConstant -> NIL .

    STAR            reduce using rule 136 (unsignedConstant -> NIL .)
    SLASH           reduce using rule 136 (unsignedConstant -> NIL .)
    DIV             reduce using rule 136 (unsignedConstant -> NIL .)
    MOD             reduce using rule 136 (unsignedConstant -> NIL .)
    AND             reduce using rule 136 (unsignedConstant -> NIL .)
    EQUAL           reduce using rule 136 (unsignedConstant -> NIL .)
    NOT_EQUAL       reduce using rule 136 (unsignedConstant -> NIL .)
    LT              reduce using rule 136 (unsignedConstant -> NIL .)
    LE              reduce using rule 136 (unsignedConstant -> NIL .)
    GT              reduce using rule 136 (unsignedConstant -> NIL .)
    GE              reduce using rule 136 (unsignedConstant -> NIL .)
    IN              reduce using rule 136 (unsignedConstant -> NIL .)
    PLUS            reduce using rule 136 (unsignedConstant -> NIL .)
    MINUS           reduce using rule 136 (unsignedConstant -> NIL .)
    OR              reduce using rule 136 (unsignedConstant -> NIL .)
    THEN            reduce using rule 136 (unsignedConstant -> NIL .)
    DO              reduce using rule 136 (unsignedConstant -> NIL .)
    RPAREN          reduce using rule 136 (unsignedConstant -> NIL .)
    COMMA           reduce using rule 136 (unsignedConstant -> NIL .)
    RBRACK          reduce using rule 136 (unsignedConstant -> NIL .)
    SEMI            reduce using rule 136 (unsignedConstant -> NIL .)
    END             reduce using rule 136 (unsignedConstant -> NIL .)
    UNTIL           reduce using rule 136 (unsignedConstant -> NIL .)
    ELSE            reduce using rule 136 (unsignedConstant -> NIL .)
    TO              reduce using rule 136 (unsignedConstant -> NIL .)
    DOWNTO          reduce using rule 136 (unsignedConstant -> NIL .)
    COLON           reduce using rule 136 (unsignedConstant -> NIL .)


state 96

    (137) unsignedConstant -> TRUE .

    STAR            reduce using rule 137 (unsignedConstant -> TRUE .)
    SLASH           reduce using rule 137 (unsignedConstant -> TRUE .)
    DIV             reduce using rule 137 (unsignedConstant -> TRUE .)
    MOD             reduce using rule 137 (unsignedConstant -> TRUE .)
    AND             reduce using rule 137 (unsignedConstant -> TRUE .)
    EQUAL           reduce using rule 137 (unsignedConstant -> TRUE .)
    NOT_EQUAL       reduce using rule 137 (unsignedConstant -> TRUE .)
    LT              reduce using rule 137 (unsignedConstant -> TRUE .)
    LE              reduce using rule 137 (unsignedConstant -> TRUE .)
    GT              reduce using rule 137 (unsignedConstant -> TRUE .)
    GE              reduce using rule 137 (unsignedConstant -> TRUE .)
    IN              reduce using rule 137 (unsignedConstant -> TRUE .)
    PLUS            reduce using rule 137 (unsignedConstant -> TRUE .)
    MINUS           reduce using rule 137 (unsignedConstant -> TRUE .)
    OR              reduce using rule 137 (unsignedConstant -> TRUE .)
    THEN            reduce using rule 137 (unsignedConstant -> TRUE .)
    DO              reduce using rule 137 (unsignedConstant -> TRUE .)
    RPAREN          reduce using rule 137 (unsignedConstant -> TRUE .)
    COMMA           reduce using rule 137 (unsignedConstant -> TRUE .)
    RBRACK          reduce using rule 137 (unsignedConstant -> TRUE .)
    SEMI            reduce using rule 137 (unsignedConstant -> TRUE .)
    END             reduce using rule 137 (unsignedConstant -> TRUE .)
    UNTIL           reduce using rule 137 (unsignedConstant -> TRUE .)
    ELSE            reduce using rule 137 (unsignedConstant -> TRUE .)
    TO              reduce using rule 137 (unsignedConstant -> TRUE .)
    DOWNTO          reduce using rule 137 (unsignedConstant -> TRUE .)
    COLON           reduce using rule 137 (unsignedConstant -> TRUE .)


state 97

    (138) unsignedConstant -> FALSE .

    STAR            reduce using rule 138 (unsignedConstant -> FALSE .)
    SLASH           reduce using rule 138 (unsignedConstant -> FALSE .)
    DIV             reduce using rule 138 (unsignedConstant -> FALSE .)
    MOD             reduce using rule 138 (unsignedConstant -> FALSE .)
    AND             reduce using rule 138 (unsignedConstant -> FALSE .)
    EQUAL           reduce using rule 138 (unsignedConstant -> FALSE .)
    NOT_EQUAL       reduce using rule 138 (unsignedConstant -> FALSE .)
    LT              reduce using rule 138 (unsignedConstant -> FALSE .)
    LE              reduce using rule 138 (unsignedConstant -> FALSE .)
    GT              reduce using rule 138 (unsignedConstant -> FALSE .)
    GE              reduce using rule 138 (unsignedConstant -> FALSE .)
    IN              reduce using rule 138 (unsignedConstant -> FALSE .)
    PLUS            reduce using rule 138 (unsignedConstant -> FALSE .)
    MINUS           reduce using rule 138 (unsignedConstant -> FALSE .)
    OR              reduce using rule 138 (unsignedConstant -> FALSE .)
    THEN            reduce using rule 138 (unsignedConstant -> FALSE .)
    DO              reduce using rule 138 (unsignedConstant -> FALSE .)
    RPAREN          reduce using rule 138 (unsignedConstant -> FALSE .)
    COMMA           reduce using rule 138 (unsignedConstant -> FALSE .)
    RBRACK          reduce using rule 138 (unsignedConstant -> FALSE .)
    SEMI            reduce using rule 138 (unsignedConstant -> FALSE .)
    END             reduce using rule 138 (unsignedConstant -> FALSE .)
    UNTIL           reduce using rule 138 (unsignedConstant -> FALSE .)
    ELSE            reduce using rule 138 (unsignedConstant -> FALSE .)
    TO              reduce using rule 138 (unsignedConstant -> FALSE .)
    DOWNTO          reduce using rule 138 (unsignedConstant -> FALSE .)
    COLON           reduce using rule 138 (unsignedConstant -> FALSE .)


state 98

    (21) unsignedNumber -> unsignedInteger .

    STAR            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    SLASH           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    DIV             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    MOD             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    AND             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    EQUAL           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    NOT_EQUAL       reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    LT              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    LE              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    GT              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    GE              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    IN              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    PLUS            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    MINUS           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    OR              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    THEN            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    DO              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    SEMI            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    RPAREN          reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    COMMA           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    RBRACK          reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    END             reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    UNTIL           reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    ELSE            reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    TO              reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    DOWNTO          reduce using rule 21 (unsignedNumber -> unsignedInteger .)
    COLON           reduce using rule 21 (unsignedNumber -> unsignedInteger .)


state 99

    (22) unsignedNumber -> unsignedReal .

    STAR            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    SLASH           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    DIV             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    MOD             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    AND             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    EQUAL           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    NOT_EQUAL       reduce using rule 22 (unsignedNumber -> unsignedReal .)
    LT              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    LE              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    GT              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    GE              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    IN              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    PLUS            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    MINUS           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    OR              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    THEN            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    DO              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    SEMI            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    RPAREN          reduce using rule 22 (unsignedNumber -> unsignedReal .)
    COMMA           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    RBRACK          reduce using rule 22 (unsignedNumber -> unsignedReal .)
    END             reduce using rule 22 (unsignedNumber -> unsignedReal .)
    UNTIL           reduce using rule 22 (unsignedNumber -> unsignedReal .)
    ELSE            reduce using rule 22 (unsignedNumber -> unsignedReal .)
    TO              reduce using rule 22 (unsignedNumber -> unsignedReal .)
    DOWNTO          reduce using rule 22 (unsignedNumber -> unsignedReal .)
    COLON           reduce using rule 22 (unsignedNumber -> unsignedReal .)


state 100

    (27) string -> STRING_LITERAL .

    STAR            reduce using rule 27 (string -> STRING_LITERAL .)
    SLASH           reduce using rule 27 (string -> STRING_LITERAL .)
    DIV             reduce using rule 27 (string -> STRING_LITERAL .)
    MOD             reduce using rule 27 (string -> STRING_LITERAL .)
    AND             reduce using rule 27 (string -> STRING_LITERAL .)
    EQUAL           reduce using rule 27 (string -> STRING_LITERAL .)
    NOT_EQUAL       reduce using rule 27 (string -> STRING_LITERAL .)
    LT              reduce using rule 27 (string -> STRING_LITERAL .)
    LE              reduce using rule 27 (string -> STRING_LITERAL .)
    GT              reduce using rule 27 (string -> STRING_LITERAL .)
    GE              reduce using rule 27 (string -> STRING_LITERAL .)
    IN              reduce using rule 27 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 27 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 27 (string -> STRING_LITERAL .)
    OR              reduce using rule 27 (string -> STRING_LITERAL .)
    THEN            reduce using rule 27 (string -> STRING_LITERAL .)
    DO              reduce using rule 27 (string -> STRING_LITERAL .)
    SEMI            reduce using rule 27 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 27 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 27 (string -> STRING_LITERAL .)
    RBRACK          reduce using rule 27 (string -> STRING_LITERAL .)
    END             reduce using rule 27 (string -> STRING_LITERAL .)
    UNTIL           reduce using rule 27 (string -> STRING_LITERAL .)
    ELSE            reduce using rule 27 (string -> STRING_LITERAL .)
    TO              reduce using rule 27 (string -> STRING_LITERAL .)
    DOWNTO          reduce using rule 27 (string -> STRING_LITERAL .)
    COLON           reduce using rule 27 (string -> STRING_LITERAL .)


state 101

    (23) unsignedInteger -> NUM_INT .

    STAR            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    SLASH           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DIV             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    MOD             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    AND             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    EQUAL           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    NOT_EQUAL       reduce using rule 23 (unsignedInteger -> NUM_INT .)
    LT              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    LE              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    GT              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    GE              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    IN              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    PLUS            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    MINUS           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    OR              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    THEN            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DO              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    SEMI            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DOTDOT          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    RPAREN          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    COMMA           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    RBRACK          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    END             reduce using rule 23 (unsignedInteger -> NUM_INT .)
    UNTIL           reduce using rule 23 (unsignedInteger -> NUM_INT .)
    ELSE            reduce using rule 23 (unsignedInteger -> NUM_INT .)
    TO              reduce using rule 23 (unsignedInteger -> NUM_INT .)
    DOWNTO          reduce using rule 23 (unsignedInteger -> NUM_INT .)
    COLON           reduce using rule 23 (unsignedInteger -> NUM_INT .)


state 102

    (24) unsignedReal -> NUM_REAL .

    STAR            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    SLASH           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    DIV             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    MOD             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    AND             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    EQUAL           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    NOT_EQUAL       reduce using rule 24 (unsignedReal -> NUM_REAL .)
    LT              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    LE              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    GT              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    GE              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    IN              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    PLUS            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    MINUS           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    OR              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    THEN            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    DO              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    SEMI            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    RPAREN          reduce using rule 24 (unsignedReal -> NUM_REAL .)
    COMMA           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    RBRACK          reduce using rule 24 (unsignedReal -> NUM_REAL .)
    END             reduce using rule 24 (unsignedReal -> NUM_REAL .)
    UNTIL           reduce using rule 24 (unsignedReal -> NUM_REAL .)
    ELSE            reduce using rule 24 (unsignedReal -> NUM_REAL .)
    TO              reduce using rule 24 (unsignedReal -> NUM_REAL .)
    DOWNTO          reduce using rule 24 (unsignedReal -> NUM_REAL .)
    COLON           reduce using rule 24 (unsignedReal -> NUM_REAL .)


state 103

    (154) forStatement -> FOR identifier . ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> FOR identifier . ASSIGN Init_Final DOWNTO Init_Final DO statement

    ASSIGN          shift and go to state 173


state 104

    (158) whileStatement -> WHILE expression . DO statement

    DO              shift and go to state 174


state 105

    (159) repeatStatement -> REPEAT statements . UNTIL expression

    UNTIL           shift and go to state 175


state 106

    (12) constantDefinitionList -> constantDefinitionList constantDefinition SEMI .

    IDENT           reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    CONST           reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    TYPE            reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    VAR             reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    PROCEDURE       reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    FUNCTION        reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)
    BEGIN           reduce using rule 12 (constantDefinitionList -> constantDefinitionList constantDefinition SEMI .)


state 107

    (17) constant -> identifier .

    SEMI            reduce using rule 17 (constant -> identifier .)


state 108

    (14) constantDefinition -> identifier EQUAL constant .

    SEMI            reduce using rule 14 (constantDefinition -> identifier EQUAL constant .)


state 109

    (15) constant -> unsignedNumber .

    SEMI            reduce using rule 15 (constant -> unsignedNumber .)


state 110

    (16) constant -> sign . unsignedNumber
    (18) constant -> sign . identifier
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (3) identifier -> . IDENT
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    IDENT           shift and go to state 20
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    unsignedNumber                 shift and go to state 176
    identifier                     shift and go to state 177
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 111

    (19) constant -> string .

    SEMI            reduce using rule 19 (constant -> string .)


state 112

    (20) constant -> constantChr .

    SEMI            reduce using rule 20 (constant -> constantChr .)


state 113

    (28) constantChr -> CHR . LPAREN unsignedInteger RPAREN

    LPAREN          shift and go to state 178


state 114

    (30) typeDefinitionList -> typeDefinitionList typeDefinition SEMI .

    IDENT           reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    CONST           reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    TYPE            reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    VAR             reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    PROCEDURE       reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    FUNCTION        reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)
    BEGIN           reduce using rule 30 (typeDefinitionList -> typeDefinitionList typeDefinition SEMI .)


state 115

    (63) typeIdentifier -> identifier .

    SEMI            reduce using rule 63 (typeIdentifier -> identifier .)
    RPAREN          reduce using rule 63 (typeIdentifier -> identifier .)


state 116

    (32) typeDefinition -> identifier EQUAL type_ .

    SEMI            reduce using rule 32 (typeDefinition -> identifier EQUAL type_ .)


state 117

    (33) type_ -> scalarType .

    SEMI            reduce using rule 33 (type_ -> scalarType .)


state 118

    (34) type_ -> subrangeType .

    SEMI            reduce using rule 34 (type_ -> subrangeType .)


state 119

    (35) type_ -> typeIdentifier .

    SEMI            reduce using rule 35 (type_ -> typeIdentifier .)


state 120

    (36) type_ -> stringType .

    SEMI            reduce using rule 36 (type_ -> stringType .)


state 121

    (37) type_ -> arrayType .

    SEMI            reduce using rule 37 (type_ -> arrayType .)


state 122

    (38) scalarType -> LPAREN . identifierList RPAREN
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    identifierList                 shift and go to state 179
    identifier                     shift and go to state 34

state 123

    (41) subrangeType -> unsignedInteger . DOTDOT unsignedInteger

    DOTDOT          shift and go to state 180


state 124

    (64) typeIdentifier -> INTEGER .

    SEMI            reduce using rule 64 (typeIdentifier -> INTEGER .)
    RPAREN          reduce using rule 64 (typeIdentifier -> INTEGER .)


state 125

    (65) typeIdentifier -> REAL .

    SEMI            reduce using rule 65 (typeIdentifier -> REAL .)
    RPAREN          reduce using rule 65 (typeIdentifier -> REAL .)


state 126

    (66) typeIdentifier -> BOOLEAN .

    SEMI            reduce using rule 66 (typeIdentifier -> BOOLEAN .)
    RPAREN          reduce using rule 66 (typeIdentifier -> BOOLEAN .)


state 127

    (67) typeIdentifier -> CHAR .

    SEMI            reduce using rule 67 (typeIdentifier -> CHAR .)
    RPAREN          reduce using rule 67 (typeIdentifier -> CHAR .)


state 128

    (68) typeIdentifier -> STRING .
    (43) stringType -> STRING . LBRACK unsignedInteger RBRACK

    SEMI            reduce using rule 68 (typeIdentifier -> STRING .)
    LBRACK          shift and go to state 181


state 129

    (47) arrayType -> ARRAY . LBRACK subrangeType RBRACK OF typeIdentifier

    LBRACK          shift and go to state 182


state 130

    (77) variableDeclarationList -> variableDeclarationList SEMI variableDeclaration .

    SEMI            reduce using rule 77 (variableDeclarationList -> variableDeclarationList SEMI variableDeclaration .)


state 131

    (79) variableDeclaration -> identifierList COLON type_ .

    SEMI            reduce using rule 79 (variableDeclaration -> identifierList COLON type_ .)


state 132

    (39) identifierList -> identifierList COMMA identifier .

    COLON           reduce using rule 39 (identifierList -> identifierList COMMA identifier .)
    COMMA           reduce using rule 39 (identifierList -> identifierList COMMA identifier .)
    RPAREN          reduce using rule 39 (identifierList -> identifierList COMMA identifier .)


state 133

    (82) procedureDeclaration -> PROCEDURE identifier SEMI block .

    SEMI            reduce using rule 82 (procedureDeclaration -> PROCEDURE identifier SEMI block .)


state 134

    (83) procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI . block
    (4) block -> . declarations compoundStatement
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (163) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration SEMI
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration SEMI
    (82) procedureDeclaration -> . PROCEDURE identifier SEMI block
    (83) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (94) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 163 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    block                          shift and go to state 183
    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 135

    (86) formalParameterList -> LPAREN formalParameterSectionList . RPAREN
    (87) formalParameterSectionList -> formalParameterSectionList . SEMI formalParameterSection

    RPAREN          shift and go to state 184
    SEMI            shift and go to state 185


state 136

    (88) formalParameterSectionList -> formalParameterSection .

    RPAREN          reduce using rule 88 (formalParameterSectionList -> formalParameterSection .)
    SEMI            reduce using rule 88 (formalParameterSectionList -> formalParameterSection .)


state 137

    (89) formalParameterSection -> parameterGroup .

    RPAREN          reduce using rule 89 (formalParameterSection -> parameterGroup .)
    SEMI            reduce using rule 89 (formalParameterSection -> parameterGroup .)


state 138

    (90) formalParameterSection -> VAR . parameterGroup
    (93) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    parameterGroup                 shift and go to state 186
    identifierList                 shift and go to state 141
    identifier                     shift and go to state 34

state 139

    (91) formalParameterSection -> FUNCTION . parameterGroup
    (93) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    parameterGroup                 shift and go to state 187
    identifierList                 shift and go to state 141
    identifier                     shift and go to state 34

state 140

    (92) formalParameterSection -> PROCEDURE . parameterGroup
    (93) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    IDENT           shift and go to state 20

    parameterGroup                 shift and go to state 188
    identifierList                 shift and go to state 141
    identifier                     shift and go to state 34

state 141

    (93) parameterGroup -> identifierList . COLON typeIdentifier
    (39) identifierList -> identifierList . COMMA identifier

    COLON           shift and go to state 189
    COMMA           shift and go to state 70


state 142

    (94) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON . resultType SEMI block
    (95) resultType -> . typeIdentifier
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (3) identifier -> . IDENT

    INTEGER         shift and go to state 124
    REAL            shift and go to state 125
    BOOLEAN         shift and go to state 126
    CHAR            shift and go to state 127
    STRING          shift and go to state 192
    IDENT           shift and go to state 20

    identifier                     shift and go to state 115
    resultType                     shift and go to state 190
    typeIdentifier                 shift and go to state 191

state 143

    (98) statementList -> statementList SEMI statement .

    SEMI            reduce using rule 98 (statementList -> statementList SEMI statement .)
    END             reduce using rule 98 (statementList -> statementList SEMI statement .)
    UNTIL           reduce using rule 98 (statementList -> statementList SEMI statement .)


state 144

    (140) callStatement -> identifier LPAREN expressionList . RPAREN
    (141) expressionList -> expressionList . COMMA expression
    (142) expressionList -> expressionList . COMMA formattedExpression

    RPAREN          shift and go to state 193
    COMMA           shift and go to state 194


state 145

    (143) expressionList -> expression .

    RPAREN          reduce using rule 143 (expressionList -> expression .)
    COMMA           reduce using rule 143 (expressionList -> expression .)


state 146

    (144) expressionList -> formattedExpression .

    RPAREN          reduce using rule 144 (expressionList -> formattedExpression .)
    COMMA           reduce using rule 144 (expressionList -> formattedExpression .)


state 147

    (145) formattedExpression -> variable . COLON expression COLON expression
    (146) formattedExpression -> variable . COLON expression
    (131) factor -> variable .

    COLON           shift and go to state 195
    STAR            reduce using rule 131 (factor -> variable .)
    SLASH           reduce using rule 131 (factor -> variable .)
    DIV             reduce using rule 131 (factor -> variable .)
    MOD             reduce using rule 131 (factor -> variable .)
    AND             reduce using rule 131 (factor -> variable .)
    EQUAL           reduce using rule 131 (factor -> variable .)
    NOT_EQUAL       reduce using rule 131 (factor -> variable .)
    LT              reduce using rule 131 (factor -> variable .)
    LE              reduce using rule 131 (factor -> variable .)
    GT              reduce using rule 131 (factor -> variable .)
    GE              reduce using rule 131 (factor -> variable .)
    IN              reduce using rule 131 (factor -> variable .)
    PLUS            reduce using rule 131 (factor -> variable .)
    MINUS           reduce using rule 131 (factor -> variable .)
    OR              reduce using rule 131 (factor -> variable .)
    RPAREN          reduce using rule 131 (factor -> variable .)
    COMMA           reduce using rule 131 (factor -> variable .)


state 148

    (108) indexedVariable -> identifier LBRACK expression . RBRACK

    RBRACK          shift and go to state 196


state 149

    (105) assignmentStatement -> variable ASSIGN Init_Final .

    SEMI            reduce using rule 105 (assignmentStatement -> variable ASSIGN Init_Final .)
    END             reduce using rule 105 (assignmentStatement -> variable ASSIGN Init_Final .)
    UNTIL           reduce using rule 105 (assignmentStatement -> variable ASSIGN Init_Final .)
    ELSE            reduce using rule 105 (assignmentStatement -> variable ASSIGN Init_Final .)


state 150

    (156) Init_Final -> callStatement .

    SEMI            reduce using rule 156 (Init_Final -> callStatement .)
    END             reduce using rule 156 (Init_Final -> callStatement .)
    UNTIL           reduce using rule 156 (Init_Final -> callStatement .)
    ELSE            reduce using rule 156 (Init_Final -> callStatement .)
    TO              reduce using rule 156 (Init_Final -> callStatement .)
    DOWNTO          reduce using rule 156 (Init_Final -> callStatement .)
    DO              reduce using rule 156 (Init_Final -> callStatement .)


state 151

    (157) Init_Final -> expression .

    SEMI            reduce using rule 157 (Init_Final -> expression .)
    END             reduce using rule 157 (Init_Final -> expression .)
    UNTIL           reduce using rule 157 (Init_Final -> expression .)
    ELSE            reduce using rule 157 (Init_Final -> expression .)
    TO              reduce using rule 157 (Init_Final -> expression .)
    DOWNTO          reduce using rule 157 (Init_Final -> expression .)
    DO              reduce using rule 157 (Init_Final -> expression .)


state 152

    (161) ifStatement -> IF expression THEN . statement
    (162) ifStatement -> IF expression THEN . statement ELSE statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 147 (emptyStatement_ -> .)
    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    END             reduce using rule 147 (emptyStatement_ -> .)
    UNTIL           reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    statement                      shift and go to state 197
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    identifier                     shift and go to state 51
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 153

    (110) expression -> simpleExpression relationalOperator . simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    simpleExpression               shift and go to state 198
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 154

    (120) simpleExpression -> simpleExpression additiveOperator . term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    term                           shift and go to state 199
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 155

    (111) relationalOperator -> EQUAL .

    PLUS            reduce using rule 111 (relationalOperator -> EQUAL .)
    MINUS           reduce using rule 111 (relationalOperator -> EQUAL .)
    LPAREN          reduce using rule 111 (relationalOperator -> EQUAL .)
    NIL             reduce using rule 111 (relationalOperator -> EQUAL .)
    TRUE            reduce using rule 111 (relationalOperator -> EQUAL .)
    FALSE           reduce using rule 111 (relationalOperator -> EQUAL .)
    IDENT           reduce using rule 111 (relationalOperator -> EQUAL .)
    STRING_LITERAL  reduce using rule 111 (relationalOperator -> EQUAL .)
    NUM_INT         reduce using rule 111 (relationalOperator -> EQUAL .)
    NUM_REAL        reduce using rule 111 (relationalOperator -> EQUAL .)


state 156

    (112) relationalOperator -> NOT_EQUAL .

    PLUS            reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    MINUS           reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    LPAREN          reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    NIL             reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    TRUE            reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    FALSE           reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    IDENT           reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    STRING_LITERAL  reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    NUM_INT         reduce using rule 112 (relationalOperator -> NOT_EQUAL .)
    NUM_REAL        reduce using rule 112 (relationalOperator -> NOT_EQUAL .)


state 157

    (113) relationalOperator -> LT .

    PLUS            reduce using rule 113 (relationalOperator -> LT .)
    MINUS           reduce using rule 113 (relationalOperator -> LT .)
    LPAREN          reduce using rule 113 (relationalOperator -> LT .)
    NIL             reduce using rule 113 (relationalOperator -> LT .)
    TRUE            reduce using rule 113 (relationalOperator -> LT .)
    FALSE           reduce using rule 113 (relationalOperator -> LT .)
    IDENT           reduce using rule 113 (relationalOperator -> LT .)
    STRING_LITERAL  reduce using rule 113 (relationalOperator -> LT .)
    NUM_INT         reduce using rule 113 (relationalOperator -> LT .)
    NUM_REAL        reduce using rule 113 (relationalOperator -> LT .)


state 158

    (114) relationalOperator -> LE .

    PLUS            reduce using rule 114 (relationalOperator -> LE .)
    MINUS           reduce using rule 114 (relationalOperator -> LE .)
    LPAREN          reduce using rule 114 (relationalOperator -> LE .)
    NIL             reduce using rule 114 (relationalOperator -> LE .)
    TRUE            reduce using rule 114 (relationalOperator -> LE .)
    FALSE           reduce using rule 114 (relationalOperator -> LE .)
    IDENT           reduce using rule 114 (relationalOperator -> LE .)
    STRING_LITERAL  reduce using rule 114 (relationalOperator -> LE .)
    NUM_INT         reduce using rule 114 (relationalOperator -> LE .)
    NUM_REAL        reduce using rule 114 (relationalOperator -> LE .)


state 159

    (115) relationalOperator -> GT .

    PLUS            reduce using rule 115 (relationalOperator -> GT .)
    MINUS           reduce using rule 115 (relationalOperator -> GT .)
    LPAREN          reduce using rule 115 (relationalOperator -> GT .)
    NIL             reduce using rule 115 (relationalOperator -> GT .)
    TRUE            reduce using rule 115 (relationalOperator -> GT .)
    FALSE           reduce using rule 115 (relationalOperator -> GT .)
    IDENT           reduce using rule 115 (relationalOperator -> GT .)
    STRING_LITERAL  reduce using rule 115 (relationalOperator -> GT .)
    NUM_INT         reduce using rule 115 (relationalOperator -> GT .)
    NUM_REAL        reduce using rule 115 (relationalOperator -> GT .)


state 160

    (116) relationalOperator -> GE .

    PLUS            reduce using rule 116 (relationalOperator -> GE .)
    MINUS           reduce using rule 116 (relationalOperator -> GE .)
    LPAREN          reduce using rule 116 (relationalOperator -> GE .)
    NIL             reduce using rule 116 (relationalOperator -> GE .)
    TRUE            reduce using rule 116 (relationalOperator -> GE .)
    FALSE           reduce using rule 116 (relationalOperator -> GE .)
    IDENT           reduce using rule 116 (relationalOperator -> GE .)
    STRING_LITERAL  reduce using rule 116 (relationalOperator -> GE .)
    NUM_INT         reduce using rule 116 (relationalOperator -> GE .)
    NUM_REAL        reduce using rule 116 (relationalOperator -> GE .)


state 161

    (117) relationalOperator -> IN .

    PLUS            reduce using rule 117 (relationalOperator -> IN .)
    MINUS           reduce using rule 117 (relationalOperator -> IN .)
    LPAREN          reduce using rule 117 (relationalOperator -> IN .)
    NIL             reduce using rule 117 (relationalOperator -> IN .)
    TRUE            reduce using rule 117 (relationalOperator -> IN .)
    FALSE           reduce using rule 117 (relationalOperator -> IN .)
    IDENT           reduce using rule 117 (relationalOperator -> IN .)
    STRING_LITERAL  reduce using rule 117 (relationalOperator -> IN .)
    NUM_INT         reduce using rule 117 (relationalOperator -> IN .)
    NUM_REAL        reduce using rule 117 (relationalOperator -> IN .)


state 162

    (121) additiveOperator -> PLUS .

    LPAREN          reduce using rule 121 (additiveOperator -> PLUS .)
    NIL             reduce using rule 121 (additiveOperator -> PLUS .)
    TRUE            reduce using rule 121 (additiveOperator -> PLUS .)
    FALSE           reduce using rule 121 (additiveOperator -> PLUS .)
    IDENT           reduce using rule 121 (additiveOperator -> PLUS .)
    STRING_LITERAL  reduce using rule 121 (additiveOperator -> PLUS .)
    NUM_INT         reduce using rule 121 (additiveOperator -> PLUS .)
    NUM_REAL        reduce using rule 121 (additiveOperator -> PLUS .)


state 163

    (122) additiveOperator -> MINUS .

    LPAREN          reduce using rule 122 (additiveOperator -> MINUS .)
    NIL             reduce using rule 122 (additiveOperator -> MINUS .)
    TRUE            reduce using rule 122 (additiveOperator -> MINUS .)
    FALSE           reduce using rule 122 (additiveOperator -> MINUS .)
    IDENT           reduce using rule 122 (additiveOperator -> MINUS .)
    STRING_LITERAL  reduce using rule 122 (additiveOperator -> MINUS .)
    NUM_INT         reduce using rule 122 (additiveOperator -> MINUS .)
    NUM_REAL        reduce using rule 122 (additiveOperator -> MINUS .)


state 164

    (123) additiveOperator -> OR .

    LPAREN          reduce using rule 123 (additiveOperator -> OR .)
    NIL             reduce using rule 123 (additiveOperator -> OR .)
    TRUE            reduce using rule 123 (additiveOperator -> OR .)
    FALSE           reduce using rule 123 (additiveOperator -> OR .)
    IDENT           reduce using rule 123 (additiveOperator -> OR .)
    STRING_LITERAL  reduce using rule 123 (additiveOperator -> OR .)
    NUM_INT         reduce using rule 123 (additiveOperator -> OR .)
    NUM_REAL        reduce using rule 123 (additiveOperator -> OR .)


state 165

    (125) term -> term multiplicativeOperator . factor
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    factor                         shift and go to state 200
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 166

    (126) multiplicativeOperator -> STAR .

    LPAREN          reduce using rule 126 (multiplicativeOperator -> STAR .)
    NIL             reduce using rule 126 (multiplicativeOperator -> STAR .)
    TRUE            reduce using rule 126 (multiplicativeOperator -> STAR .)
    FALSE           reduce using rule 126 (multiplicativeOperator -> STAR .)
    IDENT           reduce using rule 126 (multiplicativeOperator -> STAR .)
    STRING_LITERAL  reduce using rule 126 (multiplicativeOperator -> STAR .)
    NUM_INT         reduce using rule 126 (multiplicativeOperator -> STAR .)
    NUM_REAL        reduce using rule 126 (multiplicativeOperator -> STAR .)


state 167

    (127) multiplicativeOperator -> SLASH .

    LPAREN          reduce using rule 127 (multiplicativeOperator -> SLASH .)
    NIL             reduce using rule 127 (multiplicativeOperator -> SLASH .)
    TRUE            reduce using rule 127 (multiplicativeOperator -> SLASH .)
    FALSE           reduce using rule 127 (multiplicativeOperator -> SLASH .)
    IDENT           reduce using rule 127 (multiplicativeOperator -> SLASH .)
    STRING_LITERAL  reduce using rule 127 (multiplicativeOperator -> SLASH .)
    NUM_INT         reduce using rule 127 (multiplicativeOperator -> SLASH .)
    NUM_REAL        reduce using rule 127 (multiplicativeOperator -> SLASH .)


state 168

    (128) multiplicativeOperator -> DIV .

    LPAREN          reduce using rule 128 (multiplicativeOperator -> DIV .)
    NIL             reduce using rule 128 (multiplicativeOperator -> DIV .)
    TRUE            reduce using rule 128 (multiplicativeOperator -> DIV .)
    FALSE           reduce using rule 128 (multiplicativeOperator -> DIV .)
    IDENT           reduce using rule 128 (multiplicativeOperator -> DIV .)
    STRING_LITERAL  reduce using rule 128 (multiplicativeOperator -> DIV .)
    NUM_INT         reduce using rule 128 (multiplicativeOperator -> DIV .)
    NUM_REAL        reduce using rule 128 (multiplicativeOperator -> DIV .)


state 169

    (129) multiplicativeOperator -> MOD .

    LPAREN          reduce using rule 129 (multiplicativeOperator -> MOD .)
    NIL             reduce using rule 129 (multiplicativeOperator -> MOD .)
    TRUE            reduce using rule 129 (multiplicativeOperator -> MOD .)
    FALSE           reduce using rule 129 (multiplicativeOperator -> MOD .)
    IDENT           reduce using rule 129 (multiplicativeOperator -> MOD .)
    STRING_LITERAL  reduce using rule 129 (multiplicativeOperator -> MOD .)
    NUM_INT         reduce using rule 129 (multiplicativeOperator -> MOD .)
    NUM_REAL        reduce using rule 129 (multiplicativeOperator -> MOD .)


state 170

    (130) multiplicativeOperator -> AND .

    LPAREN          reduce using rule 130 (multiplicativeOperator -> AND .)
    NIL             reduce using rule 130 (multiplicativeOperator -> AND .)
    TRUE            reduce using rule 130 (multiplicativeOperator -> AND .)
    FALSE           reduce using rule 130 (multiplicativeOperator -> AND .)
    IDENT           reduce using rule 130 (multiplicativeOperator -> AND .)
    STRING_LITERAL  reduce using rule 130 (multiplicativeOperator -> AND .)
    NUM_INT         reduce using rule 130 (multiplicativeOperator -> AND .)
    NUM_REAL        reduce using rule 130 (multiplicativeOperator -> AND .)


state 171

    (119) simpleExpression -> sign term .
    (125) term -> term . multiplicativeOperator factor
    (126) multiplicativeOperator -> . STAR
    (127) multiplicativeOperator -> . SLASH
    (128) multiplicativeOperator -> . DIV
    (129) multiplicativeOperator -> . MOD
    (130) multiplicativeOperator -> . AND

    EQUAL           reduce using rule 119 (simpleExpression -> sign term .)
    NOT_EQUAL       reduce using rule 119 (simpleExpression -> sign term .)
    LT              reduce using rule 119 (simpleExpression -> sign term .)
    LE              reduce using rule 119 (simpleExpression -> sign term .)
    GT              reduce using rule 119 (simpleExpression -> sign term .)
    GE              reduce using rule 119 (simpleExpression -> sign term .)
    IN              reduce using rule 119 (simpleExpression -> sign term .)
    PLUS            reduce using rule 119 (simpleExpression -> sign term .)
    MINUS           reduce using rule 119 (simpleExpression -> sign term .)
    OR              reduce using rule 119 (simpleExpression -> sign term .)
    THEN            reduce using rule 119 (simpleExpression -> sign term .)
    DO              reduce using rule 119 (simpleExpression -> sign term .)
    RPAREN          reduce using rule 119 (simpleExpression -> sign term .)
    COMMA           reduce using rule 119 (simpleExpression -> sign term .)
    RBRACK          reduce using rule 119 (simpleExpression -> sign term .)
    SEMI            reduce using rule 119 (simpleExpression -> sign term .)
    END             reduce using rule 119 (simpleExpression -> sign term .)
    UNTIL           reduce using rule 119 (simpleExpression -> sign term .)
    ELSE            reduce using rule 119 (simpleExpression -> sign term .)
    TO              reduce using rule 119 (simpleExpression -> sign term .)
    DOWNTO          reduce using rule 119 (simpleExpression -> sign term .)
    COLON           reduce using rule 119 (simpleExpression -> sign term .)
    STAR            shift and go to state 166
    SLASH           shift and go to state 167
    DIV             shift and go to state 168
    MOD             shift and go to state 169
    AND             shift and go to state 170

    multiplicativeOperator         shift and go to state 165

state 172

    (133) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 201


state 173

    (154) forStatement -> FOR identifier ASSIGN . Init_Final TO Init_Final DO statement
    (155) forStatement -> FOR identifier ASSIGN . Init_Final DOWNTO Init_Final DO statement
    (156) Init_Final -> . callStatement
    (157) Init_Final -> . expression
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (3) identifier -> . IDENT
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    IDENT           shift and go to state 20
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    identifier                     shift and go to state 51
    Init_Final                     shift and go to state 202
    callStatement                  shift and go to state 150
    expression                     shift and go to state 151
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 174

    (158) whileStatement -> WHILE expression DO . statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 147 (emptyStatement_ -> .)
    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    END             reduce using rule 147 (emptyStatement_ -> .)
    UNTIL           reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    statement                      shift and go to state 203
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    identifier                     shift and go to state 51
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 175

    (159) repeatStatement -> REPEAT statements UNTIL . expression
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    expression                     shift and go to state 204
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 176

    (16) constant -> sign unsignedNumber .

    SEMI            reduce using rule 16 (constant -> sign unsignedNumber .)


state 177

    (18) constant -> sign identifier .

    SEMI            reduce using rule 18 (constant -> sign identifier .)


state 178

    (28) constantChr -> CHR LPAREN . unsignedInteger RPAREN
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 101

    unsignedInteger                shift and go to state 205

state 179

    (38) scalarType -> LPAREN identifierList . RPAREN
    (39) identifierList -> identifierList . COMMA identifier

    RPAREN          shift and go to state 206
    COMMA           shift and go to state 70


state 180

    (41) subrangeType -> unsignedInteger DOTDOT . unsignedInteger
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 101

    unsignedInteger                shift and go to state 207

state 181

    (43) stringType -> STRING LBRACK . unsignedInteger RBRACK
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 101

    unsignedInteger                shift and go to state 208

state 182

    (47) arrayType -> ARRAY LBRACK . subrangeType RBRACK OF typeIdentifier
    (41) subrangeType -> . unsignedInteger DOTDOT unsignedInteger
    (23) unsignedInteger -> . NUM_INT

    NUM_INT         shift and go to state 101

    subrangeType                   shift and go to state 209
    unsignedInteger                shift and go to state 123

state 183

    (83) procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .

    SEMI            reduce using rule 83 (procedureDeclaration -> PROCEDURE identifier formalParameterList_opt SEMI block .)


state 184

    (86) formalParameterList -> LPAREN formalParameterSectionList RPAREN .

    SEMI            reduce using rule 86 (formalParameterList -> LPAREN formalParameterSectionList RPAREN .)
    COLON           reduce using rule 86 (formalParameterList -> LPAREN formalParameterSectionList RPAREN .)


state 185

    (87) formalParameterSectionList -> formalParameterSectionList SEMI . formalParameterSection
    (89) formalParameterSection -> . parameterGroup
    (90) formalParameterSection -> . VAR parameterGroup
    (91) formalParameterSection -> . FUNCTION parameterGroup
    (92) formalParameterSection -> . PROCEDURE parameterGroup
    (93) parameterGroup -> . identifierList COLON typeIdentifier
    (39) identifierList -> . identifierList COMMA identifier
    (40) identifierList -> . identifier
    (3) identifier -> . IDENT

    VAR             shift and go to state 138
    FUNCTION        shift and go to state 139
    PROCEDURE       shift and go to state 140
    IDENT           shift and go to state 20

    formalParameterSection         shift and go to state 210
    parameterGroup                 shift and go to state 137
    identifierList                 shift and go to state 141
    identifier                     shift and go to state 34

state 186

    (90) formalParameterSection -> VAR parameterGroup .

    RPAREN          reduce using rule 90 (formalParameterSection -> VAR parameterGroup .)
    SEMI            reduce using rule 90 (formalParameterSection -> VAR parameterGroup .)


state 187

    (91) formalParameterSection -> FUNCTION parameterGroup .

    RPAREN          reduce using rule 91 (formalParameterSection -> FUNCTION parameterGroup .)
    SEMI            reduce using rule 91 (formalParameterSection -> FUNCTION parameterGroup .)


state 188

    (92) formalParameterSection -> PROCEDURE parameterGroup .

    RPAREN          reduce using rule 92 (formalParameterSection -> PROCEDURE parameterGroup .)
    SEMI            reduce using rule 92 (formalParameterSection -> PROCEDURE parameterGroup .)


state 189

    (93) parameterGroup -> identifierList COLON . typeIdentifier
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (3) identifier -> . IDENT

    INTEGER         shift and go to state 124
    REAL            shift and go to state 125
    BOOLEAN         shift and go to state 126
    CHAR            shift and go to state 127
    STRING          shift and go to state 192
    IDENT           shift and go to state 20

    typeIdentifier                 shift and go to state 211
    identifier                     shift and go to state 115

state 190

    (94) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType . SEMI block

    SEMI            shift and go to state 212


state 191

    (95) resultType -> typeIdentifier .

    SEMI            reduce using rule 95 (resultType -> typeIdentifier .)


state 192

    (68) typeIdentifier -> STRING .

    SEMI            reduce using rule 68 (typeIdentifier -> STRING .)
    RPAREN          reduce using rule 68 (typeIdentifier -> STRING .)


state 193

    (140) callStatement -> identifier LPAREN expressionList RPAREN .

    SEMI            reduce using rule 140 (callStatement -> identifier LPAREN expressionList RPAREN .)
    END             reduce using rule 140 (callStatement -> identifier LPAREN expressionList RPAREN .)
    UNTIL           reduce using rule 140 (callStatement -> identifier LPAREN expressionList RPAREN .)
    ELSE            reduce using rule 140 (callStatement -> identifier LPAREN expressionList RPAREN .)
    TO              reduce using rule 140 (callStatement -> identifier LPAREN expressionList RPAREN .)
    DOWNTO          reduce using rule 140 (callStatement -> identifier LPAREN expressionList RPAREN .)
    DO              reduce using rule 140 (callStatement -> identifier LPAREN expressionList RPAREN .)


state 194

    (141) expressionList -> expressionList COMMA . expression
    (142) expressionList -> expressionList COMMA . formattedExpression
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (145) formattedExpression -> . variable COLON expression COLON expression
    (146) formattedExpression -> . variable COLON expression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    IDENT           shift and go to state 20
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    expression                     shift and go to state 213
    formattedExpression            shift and go to state 214
    simpleExpression               shift and go to state 83
    variable                       shift and go to state 147
    term                           shift and go to state 84
    sign                           shift and go to state 85
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    factor                         shift and go to state 86
    unsignedConstant               shift and go to state 90
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 195

    (145) formattedExpression -> variable COLON . expression COLON expression
    (146) formattedExpression -> variable COLON . expression
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    variable                       shift and go to state 89
    expression                     shift and go to state 215
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 196

    (108) indexedVariable -> identifier LBRACK expression RBRACK .

    ASSIGN          reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    STAR            reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    SLASH           reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    DIV             reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    MOD             reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    AND             reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    EQUAL           reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    NOT_EQUAL       reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    LT              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    LE              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    GT              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    GE              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    IN              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    PLUS            reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    MINUS           reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    OR              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    THEN            reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    DO              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    COLON           reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    RPAREN          reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    COMMA           reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    RBRACK          reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    SEMI            reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    END             reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    UNTIL           reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    ELSE            reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    TO              reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)
    DOWNTO          reduce using rule 108 (indexedVariable -> identifier LBRACK expression RBRACK .)


state 197

    (161) ifStatement -> IF expression THEN statement .
    (162) ifStatement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMI            reduce using rule 161 (ifStatement -> IF expression THEN statement .)
    END             reduce using rule 161 (ifStatement -> IF expression THEN statement .)
    UNTIL           reduce using rule 161 (ifStatement -> IF expression THEN statement .)
    ELSE            shift and go to state 216

  ! ELSE            [ reduce using rule 161 (ifStatement -> IF expression THEN statement .) ]


state 198

    (110) expression -> simpleExpression relationalOperator simpleExpression .
    (120) simpleExpression -> simpleExpression . additiveOperator term
    (121) additiveOperator -> . PLUS
    (122) additiveOperator -> . MINUS
    (123) additiveOperator -> . OR

    THEN            reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    DO              reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    RPAREN          reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    COMMA           reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    RBRACK          reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    SEMI            reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    END             reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    UNTIL           reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    ELSE            reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    TO              reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    DOWNTO          reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    COLON           reduce using rule 110 (expression -> simpleExpression relationalOperator simpleExpression .)
    PLUS            shift and go to state 162
    MINUS           shift and go to state 163
    OR              shift and go to state 164

    additiveOperator               shift and go to state 154

state 199

    (120) simpleExpression -> simpleExpression additiveOperator term .
    (125) term -> term . multiplicativeOperator factor
    (126) multiplicativeOperator -> . STAR
    (127) multiplicativeOperator -> . SLASH
    (128) multiplicativeOperator -> . DIV
    (129) multiplicativeOperator -> . MOD
    (130) multiplicativeOperator -> . AND

    EQUAL           reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    NOT_EQUAL       reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    LT              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    LE              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    GT              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    GE              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    IN              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    PLUS            reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    MINUS           reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    OR              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    THEN            reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    DO              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    RPAREN          reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    COMMA           reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    RBRACK          reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    SEMI            reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    END             reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    UNTIL           reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    ELSE            reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    TO              reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    DOWNTO          reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    COLON           reduce using rule 120 (simpleExpression -> simpleExpression additiveOperator term .)
    STAR            shift and go to state 166
    SLASH           shift and go to state 167
    DIV             shift and go to state 168
    MOD             shift and go to state 169
    AND             shift and go to state 170

    multiplicativeOperator         shift and go to state 165

state 200

    (125) term -> term multiplicativeOperator factor .

    STAR            reduce using rule 125 (term -> term multiplicativeOperator factor .)
    SLASH           reduce using rule 125 (term -> term multiplicativeOperator factor .)
    DIV             reduce using rule 125 (term -> term multiplicativeOperator factor .)
    MOD             reduce using rule 125 (term -> term multiplicativeOperator factor .)
    AND             reduce using rule 125 (term -> term multiplicativeOperator factor .)
    EQUAL           reduce using rule 125 (term -> term multiplicativeOperator factor .)
    NOT_EQUAL       reduce using rule 125 (term -> term multiplicativeOperator factor .)
    LT              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    LE              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    GT              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    GE              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    IN              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    PLUS            reduce using rule 125 (term -> term multiplicativeOperator factor .)
    MINUS           reduce using rule 125 (term -> term multiplicativeOperator factor .)
    OR              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    THEN            reduce using rule 125 (term -> term multiplicativeOperator factor .)
    DO              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    RPAREN          reduce using rule 125 (term -> term multiplicativeOperator factor .)
    COMMA           reduce using rule 125 (term -> term multiplicativeOperator factor .)
    RBRACK          reduce using rule 125 (term -> term multiplicativeOperator factor .)
    SEMI            reduce using rule 125 (term -> term multiplicativeOperator factor .)
    END             reduce using rule 125 (term -> term multiplicativeOperator factor .)
    UNTIL           reduce using rule 125 (term -> term multiplicativeOperator factor .)
    ELSE            reduce using rule 125 (term -> term multiplicativeOperator factor .)
    TO              reduce using rule 125 (term -> term multiplicativeOperator factor .)
    DOWNTO          reduce using rule 125 (term -> term multiplicativeOperator factor .)
    COLON           reduce using rule 125 (term -> term multiplicativeOperator factor .)


state 201

    (133) factor -> LPAREN expression RPAREN .

    STAR            reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    SLASH           reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 133 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 133 (factor -> LPAREN expression RPAREN .)


state 202

    (154) forStatement -> FOR identifier ASSIGN Init_Final . TO Init_Final DO statement
    (155) forStatement -> FOR identifier ASSIGN Init_Final . DOWNTO Init_Final DO statement

    TO              shift and go to state 217
    DOWNTO          shift and go to state 218


state 203

    (158) whileStatement -> WHILE expression DO statement .

    SEMI            reduce using rule 158 (whileStatement -> WHILE expression DO statement .)
    END             reduce using rule 158 (whileStatement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 158 (whileStatement -> WHILE expression DO statement .)
    ELSE            reduce using rule 158 (whileStatement -> WHILE expression DO statement .)


state 204

    (159) repeatStatement -> REPEAT statements UNTIL expression .

    SEMI            reduce using rule 159 (repeatStatement -> REPEAT statements UNTIL expression .)
    END             reduce using rule 159 (repeatStatement -> REPEAT statements UNTIL expression .)
    UNTIL           reduce using rule 159 (repeatStatement -> REPEAT statements UNTIL expression .)
    ELSE            reduce using rule 159 (repeatStatement -> REPEAT statements UNTIL expression .)


state 205

    (28) constantChr -> CHR LPAREN unsignedInteger . RPAREN

    RPAREN          shift and go to state 219


state 206

    (38) scalarType -> LPAREN identifierList RPAREN .

    SEMI            reduce using rule 38 (scalarType -> LPAREN identifierList RPAREN .)


state 207

    (41) subrangeType -> unsignedInteger DOTDOT unsignedInteger .

    SEMI            reduce using rule 41 (subrangeType -> unsignedInteger DOTDOT unsignedInteger .)
    RBRACK          reduce using rule 41 (subrangeType -> unsignedInteger DOTDOT unsignedInteger .)


state 208

    (43) stringType -> STRING LBRACK unsignedInteger . RBRACK

    RBRACK          shift and go to state 220


state 209

    (47) arrayType -> ARRAY LBRACK subrangeType . RBRACK OF typeIdentifier

    RBRACK          shift and go to state 221


state 210

    (87) formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection .

    RPAREN          reduce using rule 87 (formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection .)
    SEMI            reduce using rule 87 (formalParameterSectionList -> formalParameterSectionList SEMI formalParameterSection .)


state 211

    (93) parameterGroup -> identifierList COLON typeIdentifier .

    RPAREN          reduce using rule 93 (parameterGroup -> identifierList COLON typeIdentifier .)
    SEMI            reduce using rule 93 (parameterGroup -> identifierList COLON typeIdentifier .)


state 212

    (94) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI . block
    (4) block -> . declarations compoundStatement
    (5) declarations -> . declaration declarations
    (6) declarations -> . empty
    (7) declaration -> . constantDefinitionBlock
    (8) declaration -> . typeDeclarationBlock
    (9) declaration -> . variableDeclarationBlock
    (10) declaration -> . procedureAndFunctionDeclarationBlock
    (163) empty -> .
    (11) constantDefinitionBlock -> . CONST constantDefinitionList
    (29) typeDeclarationBlock -> . TYPE typeDefinitionList
    (76) variableDeclarationBlock -> . VAR variableDeclarationList SEMI
    (80) procedureAndFunctionDeclarationBlock -> . procedureDeclaration SEMI
    (81) procedureAndFunctionDeclarationBlock -> . functionDeclaration SEMI
    (82) procedureDeclaration -> . PROCEDURE identifier SEMI block
    (83) procedureDeclaration -> . PROCEDURE identifier formalParameterList_opt SEMI block
    (94) functionDeclaration -> . FUNCTION identifier formalParameterList_opt COLON resultType SEMI block

    BEGIN           reduce using rule 163 (empty -> .)
    CONST           shift and go to state 12
    TYPE            shift and go to state 13
    VAR             shift and go to state 14
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    block                          shift and go to state 222
    declarations                   shift and go to state 5
    declaration                    shift and go to state 6
    empty                          shift and go to state 7
    constantDefinitionBlock        shift and go to state 8
    typeDeclarationBlock           shift and go to state 9
    variableDeclarationBlock       shift and go to state 10
    procedureAndFunctionDeclarationBlock shift and go to state 11
    procedureDeclaration           shift and go to state 15
    functionDeclaration            shift and go to state 16

state 213

    (141) expressionList -> expressionList COMMA expression .

    RPAREN          reduce using rule 141 (expressionList -> expressionList COMMA expression .)
    COMMA           reduce using rule 141 (expressionList -> expressionList COMMA expression .)


state 214

    (142) expressionList -> expressionList COMMA formattedExpression .

    RPAREN          reduce using rule 142 (expressionList -> expressionList COMMA formattedExpression .)
    COMMA           reduce using rule 142 (expressionList -> expressionList COMMA formattedExpression .)


state 215

    (145) formattedExpression -> variable COLON expression . COLON expression
    (146) formattedExpression -> variable COLON expression .

    COLON           shift and go to state 223
    RPAREN          reduce using rule 146 (formattedExpression -> variable COLON expression .)
    COMMA           reduce using rule 146 (formattedExpression -> variable COLON expression .)


state 216

    (162) ifStatement -> IF expression THEN statement ELSE . statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 147 (emptyStatement_ -> .)
    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    END             reduce using rule 147 (emptyStatement_ -> .)
    UNTIL           reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    statement                      shift and go to state 224
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    identifier                     shift and go to state 51
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 217

    (154) forStatement -> FOR identifier ASSIGN Init_Final TO . Init_Final DO statement
    (156) Init_Final -> . callStatement
    (157) Init_Final -> . expression
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (3) identifier -> . IDENT
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    IDENT           shift and go to state 20
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    identifier                     shift and go to state 51
    Init_Final                     shift and go to state 225
    callStatement                  shift and go to state 150
    expression                     shift and go to state 151
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 218

    (155) forStatement -> FOR identifier ASSIGN Init_Final DOWNTO . Init_Final DO statement
    (156) Init_Final -> . callStatement
    (157) Init_Final -> . expression
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (3) identifier -> . IDENT
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    IDENT           shift and go to state 20
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    identifier                     shift and go to state 51
    Init_Final                     shift and go to state 226
    callStatement                  shift and go to state 150
    expression                     shift and go to state 151
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    variable                       shift and go to state 89
    unsignedConstant               shift and go to state 90
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 219

    (28) constantChr -> CHR LPAREN unsignedInteger RPAREN .

    SEMI            reduce using rule 28 (constantChr -> CHR LPAREN unsignedInteger RPAREN .)


state 220

    (43) stringType -> STRING LBRACK unsignedInteger RBRACK .

    SEMI            reduce using rule 43 (stringType -> STRING LBRACK unsignedInteger RBRACK .)


state 221

    (47) arrayType -> ARRAY LBRACK subrangeType RBRACK . OF typeIdentifier

    OF              shift and go to state 227


state 222

    (94) functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .

    SEMI            reduce using rule 94 (functionDeclaration -> FUNCTION identifier formalParameterList_opt COLON resultType SEMI block .)


state 223

    (145) formattedExpression -> variable COLON expression COLON . expression
    (109) expression -> . simpleExpression
    (110) expression -> . simpleExpression relationalOperator simpleExpression
    (118) simpleExpression -> . term
    (119) simpleExpression -> . sign term
    (120) simpleExpression -> . simpleExpression additiveOperator term
    (124) term -> . factor
    (125) term -> . term multiplicativeOperator factor
    (25) sign -> . PLUS
    (26) sign -> . MINUS
    (131) factor -> . variable
    (132) factor -> . unsignedConstant
    (133) factor -> . LPAREN expression RPAREN
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (134) unsignedConstant -> . unsignedNumber
    (135) unsignedConstant -> . string
    (136) unsignedConstant -> . NIL
    (137) unsignedConstant -> . TRUE
    (138) unsignedConstant -> . FALSE
    (3) identifier -> . IDENT
    (108) indexedVariable -> . identifier LBRACK expression RBRACK
    (21) unsignedNumber -> . unsignedInteger
    (22) unsignedNumber -> . unsignedReal
    (27) string -> . STRING_LITERAL
    (23) unsignedInteger -> . NUM_INT
    (24) unsignedReal -> . NUM_REAL

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    LPAREN          shift and go to state 91
    NIL             shift and go to state 95
    TRUE            shift and go to state 96
    FALSE           shift and go to state 97
    IDENT           shift and go to state 20
    STRING_LITERAL  shift and go to state 100
    NUM_INT         shift and go to state 101
    NUM_REAL        shift and go to state 102

    variable                       shift and go to state 89
    expression                     shift and go to state 228
    simpleExpression               shift and go to state 83
    term                           shift and go to state 84
    sign                           shift and go to state 85
    factor                         shift and go to state 86
    unsignedConstant               shift and go to state 90
    identifier                     shift and go to state 92
    indexedVariable                shift and go to state 57
    unsignedNumber                 shift and go to state 93
    string                         shift and go to state 94
    unsignedInteger                shift and go to state 98
    unsignedReal                   shift and go to state 99

state 224

    (162) ifStatement -> IF expression THEN statement ELSE statement .

    SEMI            reduce using rule 162 (ifStatement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 162 (ifStatement -> IF expression THEN statement ELSE statement .)
    UNTIL           reduce using rule 162 (ifStatement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 162 (ifStatement -> IF expression THEN statement ELSE statement .)


state 225

    (154) forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final . DO statement

    DO              shift and go to state 229


state 226

    (155) forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final . DO statement

    DO              shift and go to state 230


state 227

    (47) arrayType -> ARRAY LBRACK subrangeType RBRACK OF . typeIdentifier
    (63) typeIdentifier -> . identifier
    (64) typeIdentifier -> . INTEGER
    (65) typeIdentifier -> . REAL
    (66) typeIdentifier -> . BOOLEAN
    (67) typeIdentifier -> . CHAR
    (68) typeIdentifier -> . STRING
    (3) identifier -> . IDENT

    INTEGER         shift and go to state 124
    REAL            shift and go to state 125
    BOOLEAN         shift and go to state 126
    CHAR            shift and go to state 127
    STRING          shift and go to state 192
    IDENT           shift and go to state 20

    typeIdentifier                 shift and go to state 231
    identifier                     shift and go to state 115

state 228

    (145) formattedExpression -> variable COLON expression COLON expression .

    RPAREN          reduce using rule 145 (formattedExpression -> variable COLON expression COLON expression .)
    COMMA           reduce using rule 145 (formattedExpression -> variable COLON expression COLON expression .)


state 229

    (154) forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO . statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 147 (emptyStatement_ -> .)
    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    END             reduce using rule 147 (emptyStatement_ -> .)
    UNTIL           reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    identifier                     shift and go to state 51
    statement                      shift and go to state 232
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 230

    (155) forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO . statement
    (100) statement -> . simpleStatement
    (101) statement -> . structuredStatement
    (102) simpleStatement -> . callStatement
    (103) simpleStatement -> . assignmentStatement
    (104) simpleStatement -> . emptyStatement_
    (148) structuredStatement -> . compoundStatement
    (149) structuredStatement -> . conditionalStatement
    (150) structuredStatement -> . loopStatement
    (139) callStatement -> . identifier
    (140) callStatement -> . identifier LPAREN expressionList RPAREN
    (105) assignmentStatement -> . variable ASSIGN Init_Final
    (147) emptyStatement_ -> .
    (96) compoundStatement -> . BEGIN statements END
    (160) conditionalStatement -> . ifStatement
    (151) loopStatement -> . forStatement
    (152) loopStatement -> . whileStatement
    (153) loopStatement -> . repeatStatement
    (3) identifier -> . IDENT
    (106) variable -> . identifier
    (107) variable -> . indexedVariable
    (161) ifStatement -> . IF expression THEN statement
    (162) ifStatement -> . IF expression THEN statement ELSE statement
    (154) forStatement -> . FOR identifier ASSIGN Init_Final TO Init_Final DO statement
    (155) forStatement -> . FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement
    (158) whileStatement -> . WHILE expression DO statement
    (159) repeatStatement -> . REPEAT statements UNTIL expression
    (108) indexedVariable -> . identifier LBRACK expression RBRACK

    ELSE            reduce using rule 147 (emptyStatement_ -> .)
    SEMI            reduce using rule 147 (emptyStatement_ -> .)
    END             reduce using rule 147 (emptyStatement_ -> .)
    UNTIL           reduce using rule 147 (emptyStatement_ -> .)
    BEGIN           shift and go to state 23
    IDENT           shift and go to state 20
    IF              shift and go to state 58
    FOR             shift and go to state 59
    WHILE           shift and go to state 60
    REPEAT          shift and go to state 61

    identifier                     shift and go to state 51
    statement                      shift and go to state 233
    simpleStatement                shift and go to state 43
    structuredStatement            shift and go to state 44
    callStatement                  shift and go to state 45
    assignmentStatement            shift and go to state 46
    emptyStatement_                shift and go to state 47
    compoundStatement              shift and go to state 48
    conditionalStatement           shift and go to state 49
    loopStatement                  shift and go to state 50
    variable                       shift and go to state 52
    ifStatement                    shift and go to state 53
    forStatement                   shift and go to state 54
    whileStatement                 shift and go to state 55
    repeatStatement                shift and go to state 56
    indexedVariable                shift and go to state 57

state 231

    (47) arrayType -> ARRAY LBRACK subrangeType RBRACK OF typeIdentifier .

    SEMI            reduce using rule 47 (arrayType -> ARRAY LBRACK subrangeType RBRACK OF typeIdentifier .)


state 232

    (154) forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO statement .

    SEMI            reduce using rule 154 (forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO statement .)
    END             reduce using rule 154 (forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO statement .)
    UNTIL           reduce using rule 154 (forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO statement .)
    ELSE            reduce using rule 154 (forStatement -> FOR identifier ASSIGN Init_Final TO Init_Final DO statement .)


state 233

    (155) forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement .

    SEMI            reduce using rule 155 (forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement .)
    END             reduce using rule 155 (forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement .)
    UNTIL           reduce using rule 155 (forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement .)
    ELSE            reduce using rule 155 (forStatement -> FOR identifier ASSIGN Init_Final DOWNTO Init_Final DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 37 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 197 resolved as shift
WARNING: reduce/reduce conflict in state 51 resolved using rule (variable -> identifier)
WARNING: rejected rule (callStatement -> identifier) in state 51
WARNING: Rule (callStatement -> identifier) is never reduced
